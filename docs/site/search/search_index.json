{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GNS3 Client","text":"<p>A Python client library for interacting with the GNS3 API.</p>"},{"location":"#overview","title":"Overview","text":"<p>GNS3 Client provides a simple, intuitive interface to interact with the GNS3 server. It allows you to:</p> <ul> <li>Create and manage GNS3 projects</li> <li>Work with nodes, links, and templates</li> <li>Automate topology creation and configuration</li> <li>Capture packets and analyze network traffic</li> <li>Manage snapshots for easy project state management</li> </ul> <p>This library is designed to make interacting with GNS3 programmatically as easy as possible, whether you're building automation tools, educational applications, or integrating GNS3 into other systems.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple, Object-Oriented API: Interact with GNS3 objects like projects, nodes, and links using intuitive Python classes.</li> <li>Authentication Support: Built-in support for authentication with the GNS3 server.</li> <li>Resource Management: Create, list, get, update, and delete GNS3 resources easily.</li> <li>Automation: Programmatically create and manage network topologies.</li> <li>Packet Capture: Start, stop, and analyze network captures from your Python code.</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from gns3client import GNS3Client\n\n# Connect to the GNS3 server\nclient = GNS3Client(host=\"http://localhost:3080\", username=\"admin\", password=\"admin\")\n\n# List all projects\nprojects = client.list_projects()\nfor project in projects:\n    print(f\"Project: {project.name} ({project.id})\")\n\n# Create a new project\nnew_project = client.create_project(\"My New Project\")\n\n# Add a router\nrouter = new_project.create_node(name=\"Router1\", node_type=\"vpcs\")\n\n# Start the router\nrouter.start()\n</code></pre> <p>Check out the Installation guide to get started, and then dive into the Usage guides for more examples. </p>"},{"location":"features/","title":"Features","text":"<p>GNS3 Client is a powerful, modern Python library for interacting with the GNS3 network emulation platform. Here's what makes it special:</p>"},{"location":"features/#modern-python-interface","title":"Modern Python Interface","text":"<pre><code>from gns3client import GNS3Client\n\n# Connect to GNS3 server\nclient = GNS3Client()\n\n# Create a new project\nproject = client.create_project(\"Network Automation Demo\")\n\n# Add a VPCS node and start it\nnode = project.create_node(name=\"PC1\", node_type=\"vpcs\")\nnode.start()\n\nprint(f\"Node created with console port: {node.console}\")\n</code></pre>"},{"location":"features/#resource-oriented-api","title":"Resource-Oriented API","text":"<p>Each GNS3 resource (Project, Node, Link) is represented by its own class with intuitive methods.</p>"},{"location":"features/#complete-functionality","title":"Complete Functionality","text":"<p>The library provides full access to all GNS3 capabilities:</p> <ul> <li>Projects: Create, open, close, list, and manage projects</li> <li>Nodes: Create, configure, start, stop, and manage all types of network devices</li> <li>Links: Connect nodes and capture network traffic</li> <li>Snapshots: Save and restore the state of your networks</li> <li>Templates: Work with device templates</li> </ul>"},{"location":"features/#command-line-interface","title":"Command Line Interface","text":"<p>Built-in CLI for quick operations from your terminal:</p> <pre><code># List all projects\ngns3-client projects list\n\n# Create a new node\ngns3-client nodes create --project-id \"project-id\" --name \"Router1\" --node-type \"vpcs\"\n</code></pre>"},{"location":"features/#authentication-support","title":"Authentication Support","text":"<pre><code># Connect with authentication\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    username=\"admin\",\n    password=\"password\"\n)\n\n# Or use an access token\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\", \n    access_token=\"your-token\"\n)\n</code></pre>"},{"location":"features/#packet-capture","title":"Packet Capture","text":"<p>Analyze network traffic directly from Python:</p> <pre><code># Start packet capture on a link\nlink.start_capture(capture_file_name=\"traffic.pcap\")\n\n# Wait for traffic to flow\ntime.sleep(10)\n\n# Get capture data and save to a file\ncapture_data = link.get_capture_stream()\nwith open(\"traffic.pcap\", \"wb\") as f:\n    f.write(capture_data)\n</code></pre>"},{"location":"features/#network-automation","title":"Network Automation","text":"<p>Automate the creation and configuration of complex network topologies:</p> <pre><code># Create a project\nproject = client.create_project(\"Automated Network\")\n\n# Add multiple nodes\nrouter1 = project.create_node(name=\"Router1\", node_type=\"dynamips\")\nrouter2 = project.create_node(name=\"Router2\", node_type=\"dynamips\")\nswitch = project.create_node(name=\"Switch1\", node_type=\"ethernet_switch\")\n\n# Connect nodes\nlink1 = project.create_link([\n    {\"node_id\": router1.id, \"adapter_number\": 0, \"port_number\": 0},\n    {\"node_id\": switch.id, \"adapter_number\": 0, \"port_number\": 0}\n])\nlink2 = project.create_link([\n    {\"node_id\": router2.id, \"adapter_number\": 0, \"port_number\": 0},\n    {\"node_id\": switch.id, \"adapter_number\": 0, \"port_number\": 1}\n])\n\n# Start all nodes\nproject.start_all()\n</code></pre>"},{"location":"features/#designed-for-integration","title":"Designed for Integration","text":"<p>The GNS3 Client is designed to be easily integrated with other tools and workflows:</p> <ul> <li>Network testing frameworks</li> <li>CI/CD pipelines</li> <li>Educational platforms</li> <li>Network simulations</li> <li>Infrastructure as code</li> </ul>"},{"location":"features/#developer-friendly","title":"Developer Friendly","text":"<ul> <li>Comprehensive documentation</li> <li>Type hints for better IDE support</li> <li>Clear error messages</li> <li>Consistent API design </li> </ul>"},{"location":"help/","title":"Help GNS3 Client","text":""},{"location":"help/#getting-help","title":"Getting Help","text":"<p>If you're having issues with GNS3 Client, here are some ways to get help:</p> <p>!!! info \"Check the Documentation\"     Make sure to thoroughly read the Tutorial and API Reference sections. Most common questions are answered there.</p> <p>!!! tip \"GitHub Issues\"     If you believe you've found a bug or want to request a feature, please open an issue on GitHub.</p> <pre><code>When reporting bugs, please include:\n\n- A clear description of the problem\n- Steps to reproduce the issue\n- Your environment details (Python version, GNS3 version, OS)\n- Code examples that demonstrate the problem\n</code></pre> <p>!!! note \"Community Support\"     Join the community discussions:</p> <pre><code>- [GNS3 Forums](https://gns3.com/community)\n- [GNS3 Discord](https://discord.gg/AUzUSQctzx)\n</code></pre>"},{"location":"help/#common-issues","title":"Common Issues","text":""},{"location":"help/#connection-problems","title":"Connection Problems","text":"<pre><code># Make sure your GNS3 server is running and accessible\nclient = GNS3Client(host=\"http://localhost:3080\")\ntry:\n    client.version()  # Test connection\n    print(\"Connection successful!\")\nexcept Exception as e:\n    print(f\"Connection error: {e}\")\n</code></pre>"},{"location":"help/#authentication-issues","title":"Authentication Issues","text":"<pre><code># If you're getting authentication errors, check your credentials\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    username=\"admin\",\n    password=\"your-password\"\n)\ntry:\n    client.login()\n    print(\"Authentication successful!\")\nexcept ValueError as e:\n    print(f\"Authentication failed: {e}\")\n</code></pre>"},{"location":"help/#node-creation-problems","title":"Node Creation Problems","text":"<p>!!! warning     If you're having trouble creating nodes, make sure:</p> <pre><code>1. The project is open\n2. The node type exists on your GNS3 server\n3. Required images are installed\n</code></pre> <pre><code># Make sure to open the project first\nproject = client.get_project(\"My Project\")\nproject.open()\n\n# Then create nodes\ntry:\n    node = project.create_node(name=\"Router1\", node_type=\"vpcs\")\n    print(f\"Node created: {node.id}\")\nexcept Exception as e:\n    print(f\"Node creation failed: {e}\")\n</code></pre>"},{"location":"help/#contributing","title":"Contributing","text":"<p>If you'd like to contribute to GNS3 Client, please see our Contributing Guidelines. </p>"},{"location":"installation/","title":"Installation","text":"<p>This guide will help you install and set up the GNS3 Client library.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>A running GNS3 server (local or remote)</li> </ul>"},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>The recommended way to install GNS3 Client is via pip:</p> <pre><code>pip install gns3-client\n</code></pre>"},{"location":"installation/#installing-from-source","title":"Installing from source","text":"<p>If you prefer to install from source, you can clone the repository and install it manually:</p> <pre><code>git clone https://github.com/markparonyan/gns3-client.git\ncd gns3-client\npip install -e .\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying installation","text":"<p>You can verify that the library is installed correctly by importing it in Python:</p> <pre><code>import gns3client\nprint(gns3client.__version__)\n</code></pre>"},{"location":"installation/#gns3-server","title":"GNS3 Server","text":"<p>The GNS3 Client library requires a running GNS3 server to connect to. </p>"},{"location":"installation/#using-with-a-local-gns3-server","title":"Using with a local GNS3 server","text":"<p>If you're running GNS3 locally, the server typically runs on <code>http://localhost:3080</code>. By default, the GNS3 Client will try to connect to this address.</p> <pre><code>from gns3client import GNS3Client\n\n# Connect to local GNS3 server\nclient = GNS3Client()  # Defaults to http://127.0.0.1:3080\n</code></pre>"},{"location":"installation/#using-with-a-remote-gns3-server","title":"Using with a remote GNS3 server","text":"<p>To connect to a remote GNS3 server, specify the host address when creating the client:</p> <pre><code>from gns3client import GNS3Client\n\n# Connect to remote GNS3 server\nclient = GNS3Client(host=\"http://remote-server:3080\")\n</code></pre>"},{"location":"installation/#authentication","title":"Authentication","text":"<p>If your GNS3 server requires authentication, you can provide username and password:</p> <pre><code>from gns3client import GNS3Client\n\n# Connect with authentication\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    username=\"admin\",\n    password=\"your-password\"\n)\n</code></pre> <p>Alternatively, if you have an access token, you can use it directly:</p> <pre><code>from gns3client import GNS3Client\n\n# Connect with access token\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    access_token=\"your-access-token\"\n)\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed the GNS3 Client, check out the Getting Started guide to learn how to use it. </p>"},{"location":"api/client/","title":"GNS3Client API Reference","text":"<p>The <code>GNS3Client</code> class is the main entry point for interacting with the GNS3 server. It provides methods for authentication, project management, and server control.</p>"},{"location":"api/client/#class-gns3client","title":"Class: GNS3Client","text":"<pre><code>from gns3client import GNS3Client\n</code></pre>"},{"location":"api/client/#constructor","title":"Constructor","text":"<pre><code>client = GNS3Client(host=\"http://127.0.0.1:3080\", username=\"admin\", password=\"admin\", access_token=None)\n</code></pre>"},{"location":"api/client/#parameters","title":"Parameters","text":"<ul> <li><code>host</code> (str): The GNS3 server host URL, defaults to \"http://127.0.0.1:3080\"</li> <li><code>username</code> (str): The username for authentication, defaults to \"admin\" </li> <li><code>password</code> (str): The password for authentication, defaults to \"admin\"</li> <li><code>access_token</code> (str, optional): The OAuth2 access token for authentication</li> </ul>"},{"location":"api/client/#example","title":"Example","text":"<pre><code># Create a client with default connection settings\nclient = GNS3Client()\n\n# Create a client with custom connection settings\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    username=\"admin\",\n    password=\"secret\"\n)\n\n# Create a client with an access token\nclient = GNS3Client(\n    host=\"http://gns3-server:3080\",\n    access_token=\"your-access-token\"\n)\n</code></pre>"},{"location":"api/client/#authentication-methods","title":"Authentication Methods","text":""},{"location":"api/client/#login","title":"login","text":"<pre><code>access_token = client.login(username=None, password=None)\n</code></pre> <p>Login to the GNS3 server and get an access token.</p>"},{"location":"api/client/#parameters_1","title":"Parameters","text":"<ul> <li><code>username</code> (str, optional): The username (defaults to self.username if not provided)</li> <li><code>password</code> (str, optional): The password (defaults to self.password if not provided)</li> </ul>"},{"location":"api/client/#returns","title":"Returns","text":"<ul> <li><code>str</code>: The access token if successful</li> </ul>"},{"location":"api/client/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If login fails</li> </ul>"},{"location":"api/client/#example_1","title":"Example","text":"<pre><code>try:\n    token = client.login()\n    print(f\"Successfully logged in with token: {token}\")\nexcept ValueError as e:\n    print(f\"Login failed: {e}\")\n</code></pre>"},{"location":"api/client/#set_access_token","title":"set_access_token","text":"<pre><code>client.set_access_token(access_token)\n</code></pre> <p>Set the access token for authentication.</p>"},{"location":"api/client/#parameters_2","title":"Parameters","text":"<ul> <li><code>access_token</code> (str): The OAuth2 access token</li> </ul>"},{"location":"api/client/#example_2","title":"Example","text":"<pre><code># Set an access token\nclient.set_access_token(\"your-access-token\")\n</code></pre>"},{"location":"api/client/#server-information-methods","title":"Server Information Methods","text":""},{"location":"api/client/#version","title":"version","text":"<pre><code>version_info = client.version()\n</code></pre> <p>Get the GNS3 controller version.</p>"},{"location":"api/client/#returns_1","title":"Returns","text":"<ul> <li><code>dict</code>: The version information</li> </ul>"},{"location":"api/client/#example_3","title":"Example","text":"<pre><code>version = client.version()\nprint(f\"GNS3 server version: {version['version']}\")\n</code></pre>"},{"location":"api/client/#stats","title":"stats","text":"<pre><code>stats_info = client.stats()\n</code></pre> <p>Get the GNS3 controller statistics.</p>"},{"location":"api/client/#returns_2","title":"Returns","text":"<ul> <li><code>dict</code>: The statistics information</li> </ul>"},{"location":"api/client/#example_4","title":"Example","text":"<pre><code>stats = client.stats()\nprint(f\"GNS3 server memory usage: {stats['memory']['used']} / {stats['memory']['total']}\")\n</code></pre>"},{"location":"api/client/#shutdown","title":"shutdown","text":"<pre><code>response = client.shutdown()\n</code></pre> <p>Shutdown the GNS3 controller.</p>"},{"location":"api/client/#returns_3","title":"Returns","text":"<ul> <li><code>dict</code>: The response data</li> </ul>"},{"location":"api/client/#example_5","title":"Example","text":"<pre><code>client.shutdown()\nprint(\"GNS3 server is shutting down\")\n</code></pre>"},{"location":"api/client/#reload","title":"reload","text":"<pre><code>response = client.reload()\n</code></pre> <p>Reload the GNS3 controller.</p>"},{"location":"api/client/#returns_4","title":"Returns","text":"<ul> <li><code>dict</code>: The response data</li> </ul>"},{"location":"api/client/#example_6","title":"Example","text":"<pre><code>client.reload()\nprint(\"GNS3 server is reloading\")\n</code></pre>"},{"location":"api/client/#notifications","title":"notifications","text":"<pre><code>notifications_list = client.notifications()\n</code></pre> <p>Get the GNS3 controller notifications.</p>"},{"location":"api/client/#returns_5","title":"Returns","text":"<ul> <li><code>list</code>: The list of notifications</li> </ul>"},{"location":"api/client/#example_7","title":"Example","text":"<pre><code>notifications = client.notifications()\nfor notification in notifications:\n    print(f\"Notification: {notification['message']}\")\n</code></pre>"},{"location":"api/client/#project-management-methods","title":"Project Management Methods","text":""},{"location":"api/client/#create_project","title":"create_project","text":"<pre><code>project = client.create_project(name, **kwargs)\n</code></pre> <p>Create a new project.</p>"},{"location":"api/client/#parameters_3","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name of the project</li> <li><code>**kwargs</code>: Additional project parameters</li> </ul>"},{"location":"api/client/#returns_6","title":"Returns","text":"<ul> <li><code>Project</code>: The created Project object</li> </ul>"},{"location":"api/client/#example_8","title":"Example","text":"<pre><code># Create a simple project\nproject = client.create_project(\"My New Project\")\n\n# Create a project with additional parameters\nproject = client.create_project(\n    name=\"Advanced Project\",\n    path=\"/path/to/projects/advanced\",\n    auto_open=True,\n    auto_close=False\n)\n</code></pre>"},{"location":"api/client/#list_projects","title":"list_projects","text":"<pre><code>projects = client.list_projects()\n</code></pre> <p>Get all projects.</p>"},{"location":"api/client/#returns_7","title":"Returns","text":"<ul> <li><code>list</code>: List of Project objects</li> </ul>"},{"location":"api/client/#example_9","title":"Example","text":"<pre><code>projects = client.list_projects()\nfor project in projects:\n    print(f\"Project: {project.name} (ID: {project.id})\")\n</code></pre>"},{"location":"api/client/#get_project","title":"get_project","text":"<pre><code>project = client.get_project(identifier)\n</code></pre> <p>Get a project by ID or name.</p>"},{"location":"api/client/#parameters_4","title":"Parameters","text":"<ul> <li><code>identifier</code> (str): The project ID or name</li> </ul>"},{"location":"api/client/#returns_8","title":"Returns","text":"<ul> <li><code>Project</code>: The project object</li> </ul>"},{"location":"api/client/#raises_1","title":"Raises","text":"<ul> <li><code>ValueError</code>: If no project with the provided name/ID exists</li> </ul>"},{"location":"api/client/#example_10","title":"Example","text":"<pre><code># Get by ID\nproject = client.get_project(\"project-id-here\")\n\n# Get by name\nproject = client.get_project(\"My Network Project\")\n</code></pre>"},{"location":"api/client/#import_project","title":"import_project","text":"<pre><code>project = client.import_project(project_file, name=None)\n</code></pre> <p>Import a project from a file.</p>"},{"location":"api/client/#parameters_5","title":"Parameters","text":"<ul> <li><code>project_file</code> (bytes): The project file content to import</li> <li><code>name</code> (str, optional): The name for the imported project</li> </ul>"},{"location":"api/client/#returns_9","title":"Returns","text":"<ul> <li><code>Project</code>: The imported Project object</li> </ul>"},{"location":"api/client/#example_11","title":"Example","text":"<pre><code>with open(\"network.gns3project\", \"rb\") as f:\n    project_data = f.read()\n\nimported_project = client.import_project(project_data, name=\"Imported Network\")\n</code></pre>"},{"location":"api/client/#list_templates","title":"list_templates","text":"<pre><code>templates = client.list_templates()\n</code></pre> <p>Get all templates.</p>"},{"location":"api/client/#returns_10","title":"Returns","text":"<ul> <li><code>list</code>: List of Template objects</li> </ul>"},{"location":"api/client/#example_12","title":"Example","text":"<pre><code>templates = client.list_templates()\nfor template in templates:\n    print(f\"Template: {template.name} (Type: {template.template_type})\")\n</code></pre>"},{"location":"api/links-api/","title":"Link API Reference","text":"<p>The <code>Link</code> class represents a GNS3 link between nodes in a project. It provides methods for managing the link and capturing packets.</p>"},{"location":"api/links-api/#class-link","title":"Class: Link","text":"<pre><code>from gns3client import GNS3Client\n# Link objects are created by the Project class\nclient = GNS3Client()\nproject = client.get_project(\"My Project\")\nlink = project.get_link(\"link-id-here\")\n</code></pre>"},{"location":"api/links-api/#properties","title":"Properties","text":""},{"location":"api/links-api/#id","title":"id","text":"<pre><code>link_id = link.id\n</code></pre> <p>Get the link ID.</p>"},{"location":"api/links-api/#returns","title":"Returns","text":"<ul> <li><code>str</code>: The link ID</li> </ul>"},{"location":"api/links-api/#example","title":"Example","text":"<pre><code>print(f\"Link ID: {link.id}\")\n</code></pre>"},{"location":"api/links-api/#nodes","title":"nodes","text":"<pre><code>link_nodes = link.nodes\n</code></pre> <p>Get the nodes connected by this link.</p>"},{"location":"api/links-api/#returns_1","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of node connection information</li> </ul>"},{"location":"api/links-api/#example_1","title":"Example","text":"<pre><code>print(f\"Link connects {len(link.nodes)} nodes:\")\nfor node_conn in link.nodes:\n    print(f\"Node ID: {node_conn['node_id']}, Adapter: {node_conn['adapter_number']}, Port: {node_conn['port_number']}\")\n</code></pre>"},{"location":"api/links-api/#capturing","title":"capturing","text":"<pre><code>is_capturing = link.capturing\n</code></pre> <p>Check if packet capturing is enabled on this link.</p>"},{"location":"api/links-api/#returns_2","title":"Returns","text":"<ul> <li><code>bool</code>: True if packet capturing is enabled</li> </ul>"},{"location":"api/links-api/#example_2","title":"Example","text":"<pre><code>if link.capturing:\n    print(\"Packet capture is active\")\nelse:\n    print(\"No active packet capture\")\n</code></pre>"},{"location":"api/links-api/#capture_file_path","title":"capture_file_path","text":"<pre><code>file_path = link.capture_file_path\n</code></pre> <p>Get the path to the packet capture file.</p>"},{"location":"api/links-api/#returns_3","title":"Returns","text":"<ul> <li><code>str</code>: The path to the packet capture file on the server</li> </ul>"},{"location":"api/links-api/#example_3","title":"Example","text":"<pre><code>if link.capturing:\n    print(f\"Capture file path: {link.capture_file_path}\")\n</code></pre>"},{"location":"api/links-api/#capture_file_name","title":"capture_file_name","text":"<pre><code>file_name = link.capture_file_name\n</code></pre> <p>Get the name of the packet capture file.</p>"},{"location":"api/links-api/#returns_4","title":"Returns","text":"<ul> <li><code>str</code>: The name of the packet capture file</li> </ul>"},{"location":"api/links-api/#example_4","title":"Example","text":"<pre><code>if link.capturing:\n    print(f\"Capture file name: {link.capture_file_name}\")\n</code></pre>"},{"location":"api/links-api/#link-management-methods","title":"Link Management Methods","text":""},{"location":"api/links-api/#refresh","title":"refresh","text":"<pre><code>link = link.refresh()\n</code></pre> <p>Refresh the link data from the server.</p>"},{"location":"api/links-api/#returns_5","title":"Returns","text":"<ul> <li><code>Link</code>: The updated link instance</li> </ul>"},{"location":"api/links-api/#example_5","title":"Example","text":"<pre><code># Refresh link data\nlink = link.refresh()\nprint(f\"Capturing status: {link.capturing}\")\n</code></pre>"},{"location":"api/links-api/#update","title":"update","text":"<pre><code>link = link.update(**kwargs)\n</code></pre> <p>Update the link properties.</p>"},{"location":"api/links-api/#parameters","title":"Parameters","text":"<ul> <li><code>**kwargs</code>: Link attributes to update</li> </ul>"},{"location":"api/links-api/#returns_6","title":"Returns","text":"<ul> <li><code>Link</code>: The updated link instance</li> </ul>"},{"location":"api/links-api/#example_6","title":"Example","text":"<pre><code># Update link filters\nlink = link.update(filters={\"latency\": [10]})\nprint(\"Link updated with latency filter\")\n</code></pre>"},{"location":"api/links-api/#reset","title":"reset","text":"<pre><code>link = link.reset()\n</code></pre> <p>Reset the link (simulate disconnect/reconnect).</p>"},{"location":"api/links-api/#returns_7","title":"Returns","text":"<ul> <li><code>Link</code>: The updated link instance</li> </ul>"},{"location":"api/links-api/#example_7","title":"Example","text":"<pre><code># Reset a link\nlink = link.reset()\nprint(\"Link reset\")\n</code></pre>"},{"location":"api/links-api/#packet-capture-methods","title":"Packet Capture Methods","text":""},{"location":"api/links-api/#start_capture","title":"start_capture","text":"<pre><code>link = link.start_capture(capture_file_name=None, data_link_type=\"DLT_EN10MB\")\n</code></pre> <p>Start packet capturing on the link.</p>"},{"location":"api/links-api/#parameters_1","title":"Parameters","text":"<ul> <li><code>capture_file_name</code> (str, optional): Optional name for the capture file</li> <li><code>data_link_type</code> (str, optional): The data link type (default: \"DLT_EN10MB\")</li> </ul>"},{"location":"api/links-api/#returns_8","title":"Returns","text":"<ul> <li><code>Link</code>: The updated link instance</li> </ul>"},{"location":"api/links-api/#example_8","title":"Example","text":"<pre><code># Start packet capture with default settings\nlink = link.start_capture()\nprint(f\"Capture started: {link.capture_file_path}\")\n\n# Start capture with custom file name\nlink = link.start_capture(capture_file_name=\"custom_capture.pcap\")\nprint(f\"Capture started: {link.capture_file_name}\")\n</code></pre>"},{"location":"api/links-api/#stop_capture","title":"stop_capture","text":"<pre><code>link = link.stop_capture()\n</code></pre> <p>Stop packet capturing on the link.</p>"},{"location":"api/links-api/#returns_9","title":"Returns","text":"<ul> <li><code>Link</code>: The updated link instance</li> </ul>"},{"location":"api/links-api/#example_9","title":"Example","text":"<pre><code># Stop packet capture\nlink = link.stop_capture()\nprint(\"Packet capture stopped\")\n</code></pre>"},{"location":"api/links-api/#get_capture_stream","title":"get_capture_stream","text":"<pre><code>capture_data = link.get_capture_stream()\n</code></pre> <p>Get the packet capture stream.</p>"},{"location":"api/links-api/#returns_10","title":"Returns","text":"<ul> <li><code>bytes</code>: The packet capture stream data</li> </ul>"},{"location":"api/links-api/#example_10","title":"Example","text":"<pre><code># Get capture data and save to file\nif link.capturing:\n    capture_data = link.get_capture_stream()\n    with open(\"capture.pcap\", \"wb\") as f:\n        f.write(capture_data)\n    print(f\"Saved capture to capture.pcap ({len(capture_data)} bytes)\")\n</code></pre>"},{"location":"api/links-api/#get_available_filters","title":"get_available_filters","text":"<pre><code>filters = link.get_available_filters()\n</code></pre> <p>Get available packet filters for the link.</p>"},{"location":"api/links-api/#returns_11","title":"Returns","text":"<ul> <li><code>List[str]</code>: List of available packet filters</li> </ul>"},{"location":"api/links-api/#example_11","title":"Example","text":"<pre><code># Get available filters\nfilters = link.get_available_filters()\nprint(\"Available filters:\")\nfor filter_name in filters:\n    print(f\"- {filter_name}\")\n</code></pre>"},{"location":"api/links-api/#example-complete-packet-capture-workflow","title":"Example: Complete Packet Capture Workflow","text":"<pre><code>from gns3client import GNS3Client\nimport time\n\n# Connect to GNS3 server\nclient = GNS3Client()\n\n# Get a project\nproject = client.get_project(\"My Network\")\n\n# Create nodes and link if needed\nrouter1 = project.create_node(name=\"Router1\", node_type=\"vpcs\")\nrouter2 = project.create_node(name=\"Router2\", node_type=\"vpcs\")\n\n# Start nodes\nrouter1.start()\nrouter2.start()\n\n# Create a link between them\nlink = project.create_link([\n    {\"node_id\": router1.id, \"adapter_number\": 0, \"port_number\": 0},\n    {\"node_id\": router2.id, \"adapter_number\": 0, \"port_number\": 0}\n])\n\n# Start packet capture\nlink.start_capture(capture_file_name=\"test_capture.pcap\")\nprint(f\"Capture started: {link.capture_file_name}\")\n\n# Wait for some traffic to flow\ntime.sleep(30)\n\n# Get the capture data\ncapture_data = link.get_capture_stream()\nwith open(\"capture.pcap\", \"wb\") as f:\n    f.write(capture_data)\nprint(f\"Saved {len(capture_data)} bytes to capture.pcap\")\n\n# Stop the capture\nlink.stop_capture()\nprint(\"Capture stopped\")\n</code></pre>"},{"location":"api/nodes-api/","title":"Node API Reference","text":"<p>The <code>Node</code> class represents a GNS3 node (device) within a project. It provides methods for controlling the node, managing files, and getting status information.</p>"},{"location":"api/nodes-api/#class-node","title":"Class: Node","text":"<pre><code>from gns3client import GNS3Client\n# Node objects are created by the Project class\nclient = GNS3Client()\nproject = client.get_project(\"My Project\")\nnode = project.get_node(\"node-id-here\")\n</code></pre>"},{"location":"api/nodes-api/#properties","title":"Properties","text":""},{"location":"api/nodes-api/#id","title":"id","text":"<pre><code>node_id = node.id\n</code></pre> <p>Get the node ID.</p>"},{"location":"api/nodes-api/#returns","title":"Returns","text":"<ul> <li><code>str</code>: The node ID</li> </ul>"},{"location":"api/nodes-api/#example","title":"Example","text":"<pre><code>print(f\"Node ID: {node.id}\")\n</code></pre>"},{"location":"api/nodes-api/#name","title":"name","text":"<pre><code>node_name = node.name\n</code></pre> <p>Get the node name.</p>"},{"location":"api/nodes-api/#returns_1","title":"Returns","text":"<ul> <li><code>str</code>: The node name</li> </ul>"},{"location":"api/nodes-api/#example_1","title":"Example","text":"<pre><code>print(f\"Node name: {node.name}\")\n</code></pre>"},{"location":"api/nodes-api/#node_type","title":"node_type","text":"<pre><code>node_type = node.node_type\n</code></pre> <p>Get the node type.</p>"},{"location":"api/nodes-api/#returns_2","title":"Returns","text":"<ul> <li><code>str</code>: The node type (e.g., \"vpcs\", \"dynamips\", \"qemu\", \"docker\")</li> </ul>"},{"location":"api/nodes-api/#example_2","title":"Example","text":"<pre><code>print(f\"Node type: {node.node_type}\")\n</code></pre>"},{"location":"api/nodes-api/#compute_id","title":"compute_id","text":"<pre><code>compute_id = node.compute_id\n</code></pre> <p>Get the compute ID.</p>"},{"location":"api/nodes-api/#returns_3","title":"Returns","text":"<ul> <li><code>str</code>: The compute ID</li> </ul>"},{"location":"api/nodes-api/#example_3","title":"Example","text":"<pre><code>print(f\"Compute ID: {node.compute_id}\")\n</code></pre>"},{"location":"api/nodes-api/#status","title":"status","text":"<pre><code>node_status = node.status\n</code></pre> <p>Get the node status.</p>"},{"location":"api/nodes-api/#returns_4","title":"Returns","text":"<ul> <li><code>str</code>: The node status (e.g., \"started\", \"stopped\", \"suspended\")</li> </ul>"},{"location":"api/nodes-api/#example_4","title":"Example","text":"<pre><code>print(f\"Node status: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#console","title":"console","text":"<pre><code>console_port = node.console\n</code></pre> <p>Get the console port.</p>"},{"location":"api/nodes-api/#returns_5","title":"Returns","text":"<ul> <li><code>int</code>: The console port</li> </ul>"},{"location":"api/nodes-api/#example_5","title":"Example","text":"<pre><code>print(f\"Console port: {node.console}\")\n</code></pre>"},{"location":"api/nodes-api/#console_host","title":"console_host","text":"<pre><code>console_host = node.console_host\n</code></pre> <p>Get the console host.</p>"},{"location":"api/nodes-api/#returns_6","title":"Returns","text":"<ul> <li><code>str</code>: The console host</li> </ul>"},{"location":"api/nodes-api/#example_6","title":"Example","text":"<pre><code>print(f\"Console host: {node.console_host}\")\n</code></pre>"},{"location":"api/nodes-api/#node-management-methods","title":"Node Management Methods","text":""},{"location":"api/nodes-api/#refresh","title":"refresh","text":"<pre><code>node = node.refresh()\n</code></pre> <p>Refresh the node data from the server.</p>"},{"location":"api/nodes-api/#returns_7","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_7","title":"Example","text":"<pre><code># Refresh node data\nnode = node.refresh()\nprint(f\"Node status: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#update","title":"update","text":"<pre><code>node = node.update(**kwargs)\n</code></pre> <p>Update the node properties.</p>"},{"location":"api/nodes-api/#parameters","title":"Parameters","text":"<ul> <li><code>**kwargs</code>: Node attributes to update</li> </ul>"},{"location":"api/nodes-api/#returns_8","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_8","title":"Example","text":"<pre><code># Update node name\nnode = node.update(name=\"Updated Node Name\")\nprint(f\"New node name: {node.name}\")\n</code></pre>"},{"location":"api/nodes-api/#node-control-methods","title":"Node Control Methods","text":""},{"location":"api/nodes-api/#start","title":"start","text":"<pre><code>node = node.start()\n</code></pre> <p>Start the node.</p>"},{"location":"api/nodes-api/#returns_9","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_9","title":"Example","text":"<pre><code># Start the node\nnode = node.start()\nprint(f\"Node status after starting: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#stop","title":"stop","text":"<pre><code>node = node.stop()\n</code></pre> <p>Stop the node.</p>"},{"location":"api/nodes-api/#returns_10","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_10","title":"Example","text":"<pre><code># Stop the node\nnode = node.stop()\nprint(f\"Node status after stopping: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#suspend","title":"suspend","text":"<pre><code>node = node.suspend()\n</code></pre> <p>Suspend the node.</p>"},{"location":"api/nodes-api/#returns_11","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_11","title":"Example","text":"<pre><code># Suspend the node\nnode = node.suspend()\nprint(f\"Node status after suspending: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#reload","title":"reload","text":"<pre><code>node = node.reload()\n</code></pre> <p>Reload the node.</p>"},{"location":"api/nodes-api/#returns_12","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_12","title":"Example","text":"<pre><code># Reload the node\nnode = node.reload()\nprint(f\"Node status after reloading: {node.status}\")\n</code></pre>"},{"location":"api/nodes-api/#console_reset","title":"console_reset","text":"<pre><code>node = node.console_reset()\n</code></pre> <p>Reset the console of the node.</p>"},{"location":"api/nodes-api/#returns_13","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_13","title":"Example","text":"<pre><code># Reset the console\nnode = node.console_reset()\nprint(\"Console reset\")\n</code></pre>"},{"location":"api/nodes-api/#node-file-operations","title":"Node File Operations","text":""},{"location":"api/nodes-api/#get_file","title":"get_file","text":"<pre><code>file_contents = node.get_file(path)\n</code></pre> <p>Get the contents of a file from the node.</p>"},{"location":"api/nodes-api/#parameters_1","title":"Parameters","text":"<ul> <li><code>path</code> (str): The path to the file</li> </ul>"},{"location":"api/nodes-api/#returns_14","title":"Returns","text":"<ul> <li><code>str</code>: The file contents</li> </ul>"},{"location":"api/nodes-api/#example_14","title":"Example","text":"<pre><code># Get a configuration file\nconfig = node.get_file(\"/etc/config.txt\")\nprint(config)\n</code></pre>"},{"location":"api/nodes-api/#post_file","title":"post_file","text":"<pre><code>node.post_file(path, data)\n</code></pre> <p>Write data to a file on the node.</p>"},{"location":"api/nodes-api/#parameters_2","title":"Parameters","text":"<ul> <li><code>path</code> (str): The path to the file</li> <li><code>data</code> (str): The data to write</li> </ul>"},{"location":"api/nodes-api/#example_15","title":"Example","text":"<pre><code># Write to a configuration file\nnode.post_file(\"/etc/config.txt\", \"interface eth0\\n  ip address 192.168.1.1/24\\n\")\nprint(\"File written\")\n</code></pre>"},{"location":"api/nodes-api/#advanced-node-operations","title":"Advanced Node Operations","text":""},{"location":"api/nodes-api/#duplicate","title":"duplicate","text":"<pre><code>duplicate_node = node.duplicate()\n</code></pre> <p>Creates a copy of the node.</p>"},{"location":"api/nodes-api/#returns_15","title":"Returns","text":"<ul> <li><code>Node</code>: The duplicated node instance</li> </ul>"},{"location":"api/nodes-api/#example_16","title":"Example","text":"<pre><code># Duplicate a node\nduplicate = node.duplicate()\nprint(f\"Created duplicate node: {duplicate.name}\")\n</code></pre>"},{"location":"api/nodes-api/#isolate","title":"isolate","text":"<pre><code>node = node.isolate()\n</code></pre> <p>Isolate the node from the network.</p>"},{"location":"api/nodes-api/#returns_16","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_17","title":"Example","text":"<pre><code># Isolate a node\nnode = node.isolate()\nprint(\"Node isolated\")\n</code></pre>"},{"location":"api/nodes-api/#unisolate","title":"unisolate","text":"<pre><code>node = node.unisolate()\n</code></pre> <p>Remove isolation from the node.</p>"},{"location":"api/nodes-api/#returns_17","title":"Returns","text":"<ul> <li><code>Node</code>: The updated node instance</li> </ul>"},{"location":"api/nodes-api/#example_18","title":"Example","text":"<pre><code># Remove isolation\nnode = node.unisolate()\nprint(\"Node unisolated\")\n</code></pre>"},{"location":"api/nodes-api/#links","title":"links","text":"<pre><code>node_links = node.links()\n</code></pre> <p>Get links connected to this node.</p>"},{"location":"api/nodes-api/#returns_18","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of links</li> </ul>"},{"location":"api/nodes-api/#example_19","title":"Example","text":"<pre><code># Get all links for this node\nlinks = node.links()\nfor link in links:\n    print(f\"Link ID: {link['link_id']}\")\n</code></pre>"},{"location":"api/nodes-api/#cisco-ios-specific-methods","title":"Cisco IOS Specific Methods","text":""},{"location":"api/nodes-api/#auto_idlepc","title":"auto_idlepc","text":"<pre><code>idlepc_result = node.auto_idlepc()\n</code></pre> <p>Find the best idlepc value (Cisco IOS specific).</p>"},{"location":"api/nodes-api/#returns_19","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The result including the idlepc value</li> </ul>"},{"location":"api/nodes-api/#example_20","title":"Example","text":"<pre><code># Find the best idlepc value for a Cisco router\nresult = node.auto_idlepc()\nprint(f\"Best idlepc value: {result['idlepc']}\")\n</code></pre>"},{"location":"api/nodes-api/#idlepc_proposals","title":"idlepc_proposals","text":"<pre><code>proposals = node.idlepc_proposals()\n</code></pre> <p>Get idlepc proposals (Cisco IOS specific).</p>"},{"location":"api/nodes-api/#returns_20","title":"Returns","text":"<ul> <li><code>List[str]</code>: List of idlepc proposals</li> </ul>"},{"location":"api/nodes-api/#example_21","title":"Example","text":"<pre><code># Get idlepc proposals for a Cisco router\nproposals = node.idlepc_proposals()\nprint(\"Idlepc proposals:\")\nfor proposal in proposals:\n    print(f\"- {proposal}\")\n</code></pre>"},{"location":"api/nodes-api/#disk-image-management","title":"Disk Image Management","text":""},{"location":"api/nodes-api/#create_disk_image","title":"create_disk_image","text":"<pre><code>result = node.create_disk_image(disk_path, **kwargs)\n</code></pre> <p>Create a disk image.</p>"},{"location":"api/nodes-api/#parameters_3","title":"Parameters","text":"<ul> <li><code>disk_path</code> (str): Path to the disk image</li> <li><code>**kwargs</code>: Additional parameters</li> </ul>"},{"location":"api/nodes-api/#returns_21","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The result</li> </ul>"},{"location":"api/nodes-api/#example_22","title":"Example","text":"<pre><code># Create a disk image for a QEMU node\nresult = node.create_disk_image(\"/hda_disk.qcow2\", qemu_img=\"qcow2\")\nprint(f\"Disk image created: {result}\")\n</code></pre>"},{"location":"api/nodes-api/#update_disk_image","title":"update_disk_image","text":"<pre><code>result = node.update_disk_image(disk_path, **kwargs)\n</code></pre> <p>Update a disk image.</p>"},{"location":"api/nodes-api/#parameters_4","title":"Parameters","text":"<ul> <li><code>disk_path</code> (str): Path to the disk image</li> <li><code>**kwargs</code>: Additional parameters</li> </ul>"},{"location":"api/nodes-api/#returns_22","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The result</li> </ul>"},{"location":"api/nodes-api/#example_23","title":"Example","text":"<pre><code># Update a disk image\nresult = node.update_disk_image(\"/hda_disk.qcow2\", new_path=\"/updated_disk.qcow2\")\nprint(f\"Disk image updated: {result}\")\n</code></pre>"},{"location":"api/nodes-api/#delete_disk_image","title":"delete_disk_image","text":"<pre><code>node.delete_disk_image(disk_path)\n</code></pre> <p>Delete a disk image.</p>"},{"location":"api/nodes-api/#parameters_5","title":"Parameters","text":"<ul> <li><code>disk_path</code> (str): Path to the disk image</li> </ul>"},{"location":"api/nodes-api/#example_24","title":"Example","text":"<pre><code># Delete a disk image\nnode.delete_disk_image(\"/hda_disk.qcow2\")\nprint(\"Disk image deleted\")\n</code></pre>"},{"location":"api/projects-api/","title":"Project API Reference","text":"<p>The <code>Project</code> class represents a GNS3 project and provides methods for managing project resources like nodes, links, and drawings.</p>"},{"location":"api/projects-api/#class-project","title":"Class: Project","text":"<pre><code>from gns3client import GNS3Client\n# Project objects are created by the GNS3Client\nclient = GNS3Client()\nproject = client.get_project(\"My Project\")\n</code></pre>"},{"location":"api/projects-api/#properties","title":"Properties","text":""},{"location":"api/projects-api/#id","title":"id","text":"<pre><code>project_id = project.id\n</code></pre> <p>Get the project ID.</p>"},{"location":"api/projects-api/#returns","title":"Returns","text":"<ul> <li><code>str</code>: The project ID</li> </ul>"},{"location":"api/projects-api/#example","title":"Example","text":"<pre><code>print(f\"Project ID: {project.id}\")\n</code></pre>"},{"location":"api/projects-api/#name","title":"name","text":"<pre><code>project_name = project.name\n</code></pre> <p>Get the project name.</p>"},{"location":"api/projects-api/#returns_1","title":"Returns","text":"<ul> <li><code>str</code>: The project name</li> </ul>"},{"location":"api/projects-api/#example_1","title":"Example","text":"<pre><code>print(f\"Project name: {project.name}\")\n</code></pre>"},{"location":"api/projects-api/#status","title":"status","text":"<pre><code>project_status = project.status\n</code></pre> <p>Get the project status.</p>"},{"location":"api/projects-api/#returns_2","title":"Returns","text":"<ul> <li><code>str</code>: The project status (e.g., \"opened\", \"closed\")</li> </ul>"},{"location":"api/projects-api/#example_2","title":"Example","text":"<pre><code>print(f\"Project status: {project.status}\")\n</code></pre>"},{"location":"api/projects-api/#path","title":"path","text":"<pre><code>project_path = project.path\n</code></pre> <p>Get the project file path.</p>"},{"location":"api/projects-api/#returns_3","title":"Returns","text":"<ul> <li><code>str</code>: The project file path on the server</li> </ul>"},{"location":"api/projects-api/#example_3","title":"Example","text":"<pre><code>print(f\"Project path: {project.path}\")\n</code></pre>"},{"location":"api/projects-api/#project-management-methods","title":"Project Management Methods","text":""},{"location":"api/projects-api/#refresh","title":"refresh","text":"<pre><code>project = project.refresh()\n</code></pre> <p>Refresh the project data from the server.</p>"},{"location":"api/projects-api/#returns_4","title":"Returns","text":"<ul> <li><code>Project</code>: The updated project instance</li> </ul>"},{"location":"api/projects-api/#example_4","title":"Example","text":"<pre><code># Refresh project data\nproject = project.refresh()\nprint(f\"Project status: {project.status}\")\n</code></pre>"},{"location":"api/projects-api/#open","title":"open","text":"<pre><code>project = project.open()\n</code></pre> <p>Open the project.</p>"},{"location":"api/projects-api/#returns_5","title":"Returns","text":"<ul> <li><code>Project</code>: The updated project instance</li> </ul>"},{"location":"api/projects-api/#example_5","title":"Example","text":"<pre><code># Open the project\nproject = project.open()\nprint(f\"Project status after opening: {project.status}\")\n</code></pre>"},{"location":"api/projects-api/#close","title":"close","text":"<pre><code>project = project.close()\n</code></pre> <p>Close the project.</p>"},{"location":"api/projects-api/#returns_6","title":"Returns","text":"<ul> <li><code>Project</code>: The updated project instance</li> </ul>"},{"location":"api/projects-api/#example_6","title":"Example","text":"<pre><code># Close the project\nproject = project.close()\nprint(f\"Project status after closing: {project.status}\")\n</code></pre>"},{"location":"api/projects-api/#delete","title":"delete","text":"<pre><code>project.delete()\n</code></pre> <p>Delete the project.</p>"},{"location":"api/projects-api/#example_7","title":"Example","text":"<pre><code># Delete the project\nproject.delete()\nprint(\"Project deleted\")\n</code></pre>"},{"location":"api/projects-api/#update","title":"update","text":"<pre><code>project = project.update(**kwargs)\n</code></pre> <p>Update the project properties.</p>"},{"location":"api/projects-api/#parameters","title":"Parameters","text":"<ul> <li><code>**kwargs</code>: Project attributes to update</li> </ul>"},{"location":"api/projects-api/#returns_7","title":"Returns","text":"<ul> <li><code>Project</code>: The updated project instance</li> </ul>"},{"location":"api/projects-api/#example_8","title":"Example","text":"<pre><code># Update project name\nproject = project.update(name=\"Updated Project Name\")\nprint(f\"New project name: {project.name}\")\n</code></pre>"},{"location":"api/projects-api/#node-management-methods","title":"Node Management Methods","text":""},{"location":"api/projects-api/#list_nodes","title":"list_nodes","text":"<pre><code>nodes = project.list_nodes()\n</code></pre> <p>List all nodes in the project.</p>"},{"location":"api/projects-api/#returns_8","title":"Returns","text":"<ul> <li><code>List[Node]</code>: List of Node objects</li> </ul>"},{"location":"api/projects-api/#example_9","title":"Example","text":"<pre><code># Get all nodes in the project\nnodes = project.list_nodes()\nfor node in nodes:\n    print(f\"Node: {node.name} (Type: {node.node_type}, Status: {node.status})\")\n</code></pre>"},{"location":"api/projects-api/#get_node","title":"get_node","text":"<pre><code>node = project.get_node(node_id)\n</code></pre> <p>Get a specific node in the project.</p>"},{"location":"api/projects-api/#parameters_1","title":"Parameters","text":"<ul> <li><code>node_id</code> (str): The ID of the node</li> </ul>"},{"location":"api/projects-api/#returns_9","title":"Returns","text":"<ul> <li><code>Node</code>: The Node object</li> </ul>"},{"location":"api/projects-api/#example_10","title":"Example","text":"<pre><code># Get a specific node\nnode = project.get_node(\"node-id-here\")\nprint(f\"Node: {node.name}\")\n</code></pre>"},{"location":"api/projects-api/#create_node","title":"create_node","text":"<pre><code>node = project.create_node(name, node_type, compute_id=\"local\", **kwargs)\n</code></pre> <p>Create a new node in the project.</p>"},{"location":"api/projects-api/#parameters_2","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name of the node</li> <li><code>node_type</code> (str): The type of the node</li> <li><code>compute_id</code> (str, optional): The compute ID (default: \"local\")</li> <li><code>**kwargs</code>: Additional node parameters</li> </ul>"},{"location":"api/projects-api/#returns_10","title":"Returns","text":"<ul> <li><code>Node</code>: The created Node object</li> </ul>"},{"location":"api/projects-api/#example_11","title":"Example","text":"<pre><code># Create a VPCS node\nvpcs = project.create_node(\n    name=\"PC1\",\n    node_type=\"vpcs\"\n)\n\n# Create a Cisco router\nrouter = project.create_node(\n    name=\"R1\",\n    node_type=\"dynamips\",\n    properties={\n        \"platform\": \"c7200\",\n        \"image\": \"c7200-adventerprisek9-mz.152-4.S6.image\"\n    }\n)\n</code></pre>"},{"location":"api/projects-api/#start_all","title":"start_all","text":"<pre><code>project.start_all()\n</code></pre> <p>Start all nodes in the project.</p>"},{"location":"api/projects-api/#example_12","title":"Example","text":"<pre><code># Start all nodes\nproject.start_all()\nprint(\"All nodes started\")\n</code></pre>"},{"location":"api/projects-api/#stop_all","title":"stop_all","text":"<pre><code>project.stop_all()\n</code></pre> <p>Stop all nodes in the project.</p>"},{"location":"api/projects-api/#example_13","title":"Example","text":"<pre><code># Stop all nodes\nproject.stop_all()\nprint(\"All nodes stopped\")\n</code></pre>"},{"location":"api/projects-api/#suspend_all","title":"suspend_all","text":"<pre><code>project.suspend_all()\n</code></pre> <p>Suspend all nodes in the project.</p>"},{"location":"api/projects-api/#example_14","title":"Example","text":"<pre><code># Suspend all nodes\nproject.suspend_all()\nprint(\"All nodes suspended\")\n</code></pre>"},{"location":"api/projects-api/#reload_all","title":"reload_all","text":"<pre><code>project.reload_all()\n</code></pre> <p>Reload all nodes in the project.</p>"},{"location":"api/projects-api/#example_15","title":"Example","text":"<pre><code># Reload all nodes\nproject.reload_all()\nprint(\"All nodes reloaded\")\n</code></pre>"},{"location":"api/projects-api/#reset_console_all","title":"reset_console_all","text":"<pre><code>project.reset_console_all()\n</code></pre> <p>Reset console for all nodes in the project.</p>"},{"location":"api/projects-api/#example_16","title":"Example","text":"<pre><code># Reset all consoles\nproject.reset_console_all()\nprint(\"All consoles reset\")\n</code></pre>"},{"location":"api/projects-api/#delete_node","title":"delete_node","text":"<pre><code>project.delete_node(node_id)\n</code></pre> <p>Delete a node from the project.</p>"},{"location":"api/projects-api/#parameters_3","title":"Parameters","text":"<ul> <li><code>node_id</code> (str): The ID of the node</li> </ul>"},{"location":"api/projects-api/#example_17","title":"Example","text":"<pre><code># Delete a node\nproject.delete_node(\"node-id-here\")\nprint(\"Node deleted\")\n</code></pre>"},{"location":"api/projects-api/#link-management-methods","title":"Link Management Methods","text":""},{"location":"api/projects-api/#list_links","title":"list_links","text":"<pre><code>links = project.list_links()\n</code></pre> <p>List all links in the project.</p>"},{"location":"api/projects-api/#returns_11","title":"Returns","text":"<ul> <li><code>List[Link]</code>: List of Link objects</li> </ul>"},{"location":"api/projects-api/#example_18","title":"Example","text":"<pre><code># Get all links in the project\nlinks = project.list_links()\nfor link in links:\n    print(f\"Link: {link.id}\")\n</code></pre>"},{"location":"api/projects-api/#get_link","title":"get_link","text":"<pre><code>link = project.get_link(link_id)\n</code></pre> <p>Get a specific link in the project.</p>"},{"location":"api/projects-api/#parameters_4","title":"Parameters","text":"<ul> <li><code>link_id</code> (str): The ID of the link</li> </ul>"},{"location":"api/projects-api/#returns_12","title":"Returns","text":"<ul> <li><code>Link</code>: The Link object</li> </ul>"},{"location":"api/projects-api/#example_19","title":"Example","text":"<pre><code># Get a specific link\nlink = project.get_link(\"link-id-here\")\nprint(f\"Link: {link.id}\")\n</code></pre>"},{"location":"api/projects-api/#create_link","title":"create_link","text":"<pre><code>link = project.create_link(nodes)\n</code></pre> <p>Create a new link in the project.</p>"},{"location":"api/projects-api/#parameters_5","title":"Parameters","text":"<ul> <li><code>nodes</code> (List[Dict[str, Any]]): List of node connection information</li> </ul>"},{"location":"api/projects-api/#returns_13","title":"Returns","text":"<ul> <li><code>Link</code>: The created Link object</li> </ul>"},{"location":"api/projects-api/#example_20","title":"Example","text":"<pre><code># Create a link between two nodes\nlink = project.create_link([\n    {\n        \"node_id\": \"router1-id\",\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    },\n    {\n        \"node_id\": \"router2-id\",\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    }\n])\nprint(f\"Link created: {link.id}\")\n</code></pre>"},{"location":"api/projects-api/#delete_link","title":"delete_link","text":"<pre><code>project.delete_link(link_id)\n</code></pre> <p>Delete a link from the project.</p>"},{"location":"api/projects-api/#parameters_6","title":"Parameters","text":"<ul> <li><code>link_id</code> (str): The ID of the link</li> </ul>"},{"location":"api/projects-api/#example_21","title":"Example","text":"<pre><code># Delete a link\nproject.delete_link(\"link-id-here\")\nprint(\"Link deleted\")\n</code></pre>"},{"location":"api/projects-api/#drawing-management-methods","title":"Drawing Management Methods","text":""},{"location":"api/projects-api/#list_drawings","title":"list_drawings","text":"<pre><code>drawings = project.list_drawings()\n</code></pre> <p>List all drawings in the project.</p>"},{"location":"api/projects-api/#returns_14","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of drawing data dictionaries</li> </ul>"},{"location":"api/projects-api/#example_22","title":"Example","text":"<pre><code># Get all drawings in the project\ndrawings = project.list_drawings()\nfor drawing in drawings:\n    print(f\"Drawing: {drawing['drawing_id']}\")\n</code></pre>"},{"location":"api/projects-api/#get_drawing","title":"get_drawing","text":"<pre><code>drawing = project.get_drawing(drawing_id)\n</code></pre> <p>Get a specific drawing in the project.</p>"},{"location":"api/projects-api/#parameters_7","title":"Parameters","text":"<ul> <li><code>drawing_id</code> (str): The ID of the drawing</li> </ul>"},{"location":"api/projects-api/#returns_15","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The drawing data dictionary</li> </ul>"},{"location":"api/projects-api/#example_23","title":"Example","text":"<pre><code># Get a specific drawing\ndrawing = project.get_drawing(\"drawing-id-here\")\nprint(f\"Drawing: {drawing}\")\n</code></pre>"},{"location":"api/projects-api/#create_drawing","title":"create_drawing","text":"<pre><code>drawing = project.create_drawing(drawing_data)\n</code></pre> <p>Create a new drawing in the project.</p>"},{"location":"api/projects-api/#parameters_8","title":"Parameters","text":"<ul> <li><code>drawing_data</code> (Dict[str, Any]): The drawing data</li> </ul>"},{"location":"api/projects-api/#returns_16","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The created drawing data</li> </ul>"},{"location":"api/projects-api/#example_24","title":"Example","text":"<pre><code># Create a text drawing\ndrawing = project.create_drawing({\n    \"svg\": \"&lt;svg&gt;&lt;text&gt;Hello GNS3&lt;/text&gt;&lt;/svg&gt;\",\n    \"x\": 100,\n    \"y\": 100,\n    \"z\": 0\n})\nprint(f\"Drawing created: {drawing['drawing_id']}\")\n</code></pre>"},{"location":"api/projects-api/#delete_drawing","title":"delete_drawing","text":"<pre><code>project.delete_drawing(drawing_id)\n</code></pre> <p>Delete a drawing from the project.</p>"},{"location":"api/projects-api/#parameters_9","title":"Parameters","text":"<ul> <li><code>drawing_id</code> (str): The ID of the drawing</li> </ul>"},{"location":"api/projects-api/#example_25","title":"Example","text":"<pre><code># Delete a drawing\nproject.delete_drawing(\"drawing-id-here\")\nprint(\"Drawing deleted\")\n</code></pre>"},{"location":"api/projects-api/#snapshot-management-methods","title":"Snapshot Management Methods","text":""},{"location":"api/projects-api/#list_snapshots","title":"list_snapshots","text":"<pre><code>snapshots = project.list_snapshots()\n</code></pre> <p>List all snapshots in the project.</p>"},{"location":"api/projects-api/#returns_17","title":"Returns","text":"<ul> <li><code>List[Snapshot]</code>: List of Snapshot objects</li> </ul>"},{"location":"api/projects-api/#example_26","title":"Example","text":"<pre><code># Get all snapshots\nsnapshots = project.list_snapshots()\nfor snapshot in snapshots:\n    print(f\"Snapshot: {snapshot.name}\")\n</code></pre>"},{"location":"api/projects-api/#create_snapshot","title":"create_snapshot","text":"<pre><code>snapshot = project.create_snapshot(name)\n</code></pre> <p>Create a new snapshot of the project.</p>"},{"location":"api/projects-api/#parameters_10","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name of the snapshot</li> </ul>"},{"location":"api/projects-api/#returns_18","title":"Returns","text":"<ul> <li><code>Snapshot</code>: The created Snapshot object</li> </ul>"},{"location":"api/projects-api/#example_27","title":"Example","text":"<pre><code># Create a snapshot\nsnapshot = project.create_snapshot(\"Initial configuration\")\nprint(f\"Snapshot created: {snapshot.name}\")\n</code></pre>"},{"location":"api/projects-api/#restore_snapshot","title":"restore_snapshot","text":"<pre><code>project.restore_snapshot(snapshot_id)\n</code></pre> <p>Restore a snapshot of the project.</p>"},{"location":"api/projects-api/#parameters_11","title":"Parameters","text":"<ul> <li><code>snapshot_id</code> (str): The ID of the snapshot</li> </ul>"},{"location":"api/projects-api/#returns_19","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The response data</li> </ul>"},{"location":"api/projects-api/#example_28","title":"Example","text":"<pre><code># Restore a snapshot\nproject.restore_snapshot(\"snapshot-id-here\")\nprint(\"Snapshot restored\")\n</code></pre>"},{"location":"api/projects-api/#delete_snapshot","title":"delete_snapshot","text":"<pre><code>project.delete_snapshot(snapshot_id)\n</code></pre> <p>Delete a snapshot of the project.</p>"},{"location":"api/projects-api/#parameters_12","title":"Parameters","text":"<ul> <li><code>snapshot_id</code> (str): The ID of the snapshot</li> </ul>"},{"location":"api/projects-api/#returns_20","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: The response data</li> </ul>"},{"location":"api/projects-api/#example_29","title":"Example","text":"<pre><code># Delete a snapshot\nproject.delete_snapshot(\"snapshot-id-here\")\nprint(\"Snapshot deleted\")\n</code></pre>"},{"location":"tutorial/","title":"Tutorial - User Guide","text":"<p>Learn how to use GNS3 Client in this step-by-step Tutorial - User Guide.</p> <p>It covers everything you need to know from the simplest scripts to complex network automation.</p> <p>You could consider this a book, a course, the official and recommended way to learn GNS3 Client. \ud83d\ude0e</p>"},{"location":"tutorial/#python-types","title":"Python Types","text":"<p>GNS3 Client makes extensive use of Python type hints for better IDE support, code completion, and documentation.</p> <p>If you need a refresher about Python type hints, check the Python typing documentation.</p> <p>In short (very short), you can declare a function with parameters like:</p> <pre><code>from typing import Optional, List, Dict, Any\n\ndef create_node(\n    project_id: str, \n    name: str, \n    node_type: str, \n    compute_id: str = \"local\", \n    properties: Optional[Dict[str, Any]] = None\n):\n    pass\n</code></pre> <p>And your editor (and GNS3 Client) will know that:</p> <ul> <li><code>project_id</code> is a required <code>str</code> parameter</li> <li><code>name</code> is a required <code>str</code> parameter</li> <li><code>node_type</code> is a required <code>str</code> parameter</li> <li><code>compute_id</code> is a <code>str</code> with default value <code>\"local\"</code></li> <li><code>properties</code> is an optional dictionary that defaults to <code>None</code></li> </ul> <p>These type hints give you autocomplete in your editor and several other features.</p> <p>GNS3 Client is based on these type hints.</p>"},{"location":"tutorial/#about-this-tutorial","title":"About this Tutorial","text":"<p>This tutorial shows you how to use GNS3 Client with all its features, step by step.</p> <p>Each section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific network automation needs.</p> <p>It is also built to work as a future reference so you can come back and see exactly what you need.</p>"},{"location":"tutorial/#run-the-code","title":"Run the Code","text":"<p>All the code blocks can be copied and used directly (they are tested Python files).</p> <p>To run any of the examples, copy the code to a file (e.g., <code>example.py</code>), and run it:</p> <pre><code>$ python example.py\n\n# Output will appear here\n</code></pre> <p>It is HIGHLY encouraged that you write or copy the code, edit it and run it locally.</p> <p>Using it in your editor is what really shows you the benefits of GNS3 Client, seeing how little code you have to write, all the inline errors, autocompletion, etc.</p> <p>You can learn a lot more by running some examples and playing around with them than by reading all the docs here.</p>"},{"location":"tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before you start, you need:</p> <ol> <li>Python 3.8 or later installed</li> <li>A running GNS3 server (local or remote)</li> </ol> <p>If you haven't installed GNS3 Client yet, head to the Installation page first. </p>"},{"location":"usage/getting-started/","title":"Getting Started","text":"<p>This guide will walk you through the basics of using the GNS3 Client library to interact with the GNS3 server.</p>"},{"location":"usage/getting-started/#connecting-to-the-gns3-server","title":"Connecting to the GNS3 Server","text":"<p>First, you'll need to import the <code>GNS3Client</code> class and create an instance:</p> <pre><code>from gns3client import GNS3Client\n\n# Connect to the GNS3 server\nclient = GNS3Client(host=\"http://localhost:3080\", username=\"admin\", password=\"admin\")\n</code></pre> <p>Once connected, you can verify the connection by checking the server version:</p> <pre><code>version_info = client.version()\nprint(f\"Connected to GNS3 server version: {version_info['version']}\")\n</code></pre>"},{"location":"usage/getting-started/#working-with-projects","title":"Working with Projects","text":""},{"location":"usage/getting-started/#list-all-projects","title":"List All Projects","text":"<pre><code>projects = client.list_projects()\nfor project in projects:\n    print(f\"Project: {project.name} (ID: {project.id})\")\n</code></pre>"},{"location":"usage/getting-started/#create-a-new-project","title":"Create a New Project","text":"<pre><code>new_project = client.create_project(\"My Network Project\")\nprint(f\"Created project: {new_project.name} (ID: {new_project.id})\")\n</code></pre>"},{"location":"usage/getting-started/#get-an-existing-project","title":"Get an Existing Project","text":"<p>You can get a project by its ID or name:</p> <pre><code># By ID\nproject = client.get_project(\"project-id-here\")\n\n# By name\nproject = client.get_project(\"My Network Project\")\n</code></pre>"},{"location":"usage/getting-started/#open-and-close-projects","title":"Open and Close Projects","text":"<p>Projects need to be opened before you can work with them:</p> <pre><code># Open a project\nproject.open()\n\n# Close when done\nproject.close()\n</code></pre>"},{"location":"usage/getting-started/#delete-a-project","title":"Delete a Project","text":"<pre><code>project.delete()\n</code></pre>"},{"location":"usage/getting-started/#working-with-nodes","title":"Working with Nodes","text":""},{"location":"usage/getting-started/#create-a-node","title":"Create a Node","text":"<pre><code># First get a project\nproject = client.get_project(\"My Network Project\")\n\n# Create a VPCS node\nvpcs_node = project.create_node(\n    name=\"PC1\",\n    node_type=\"vpcs\"\n)\n\n# Create a Cisco router\nrouter = project.create_node(\n    name=\"R1\",\n    node_type=\"dynamips\",\n    properties={\n        \"platform\": \"c7200\",\n        \"image\": \"c7200-adventerprisek9-mz.152-4.S6.image\",\n    }\n)\n</code></pre>"},{"location":"usage/getting-started/#list-nodes-in-a-project","title":"List Nodes in a Project","text":"<pre><code>nodes = project.list_nodes()\nfor node in nodes:\n    print(f\"Node: {node.name} (Type: {node.node_type}, Status: {node.status})\")\n</code></pre>"},{"location":"usage/getting-started/#control-nodes","title":"Control Nodes","text":"<pre><code># Start a node\nnode.start()\n\n# Stop a node\nnode.stop()\n\n# Restart a node\nnode.stop()\nnode.start()\n\n# Suspend a node\nnode.suspend()\n</code></pre>"},{"location":"usage/getting-started/#get-node-console-information","title":"Get Node Console Information","text":"<pre><code>print(f\"Console port: {node.console}\")\nprint(f\"Console host: {node.console_host}\")\n</code></pre>"},{"location":"usage/getting-started/#delete-a-node","title":"Delete a Node","text":"<pre><code>node.delete()\n</code></pre>"},{"location":"usage/getting-started/#working-with-links","title":"Working with Links","text":""},{"location":"usage/getting-started/#create-a-link","title":"Create a Link","text":"<p>To create a link, you need to specify the nodes and ports to connect:</p> <pre><code># Create a link between two nodes\nlink = project.create_link([\n    {\n        \"node_id\": router.id,\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    },\n    {\n        \"node_id\": vpcs_node.id, \n        \"adapter_number\": 0,\n        \"port_number\": 0\n    }\n])\n</code></pre>"},{"location":"usage/getting-started/#list-links-in-a-project","title":"List Links in a Project","text":"<pre><code>links = project.list_links()\nfor link in links:\n    print(f\"Link ID: {link.id}, Connected nodes: {len(link.nodes)}\")\n</code></pre>"},{"location":"usage/getting-started/#packet-capture-on-a-link","title":"Packet Capture on a Link","text":"<pre><code># Start packet capture\nlink.start_capture(capture_file_name=\"my_capture.pcap\")\n\n# Stop capture\nlink.stop_capture()\n\n# Get capture data\ncapture_data = link.get_capture_stream()\nwith open(\"my_capture.pcap\", \"wb\") as f:\n    f.write(capture_data)\n</code></pre>"},{"location":"usage/getting-started/#delete-a-link","title":"Delete a Link","text":"<pre><code>link.delete()\n</code></pre>"},{"location":"usage/getting-started/#project-control-operations","title":"Project Control Operations","text":"<p>You can control all nodes in a project with these operations:</p> <pre><code># Start all nodes\nproject.start_all()\n\n# Stop all nodes\nproject.stop_all()\n\n# Suspend all nodes\nproject.suspend_all()\n</code></pre>"},{"location":"usage/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, check out:</p> <ul> <li>Python API Reference for more details on the Python API</li> <li>Command Line Interface for information on using the CLI tool</li> <li>API Reference for a complete reference of all available methods </li> </ul>"},{"location":"usage/python-api/","title":"Python API Reference","text":"<p>This guide provides more advanced examples for working with the GNS3 Client Python API.</p>"},{"location":"usage/python-api/#gns3client-advanced-usage","title":"GNS3Client Advanced Usage","text":""},{"location":"usage/python-api/#error-handling","title":"Error Handling","text":"<p>It's important to handle errors properly when interacting with the GNS3 server:</p> <pre><code>from gns3client import GNS3Client\n\ntry:\n    client = GNS3Client(host=\"http://localhost:3080\")\n    client.version()\nexcept Exception as e:\n    print(f\"Error connecting to GNS3 server: {e}\")\n</code></pre>"},{"location":"usage/python-api/#authentication","title":"Authentication","text":"<p>For servers with authentication, you can either provide credentials during initialization or login later:</p> <pre><code># Option 1: During initialization\nclient = GNS3Client(\n    host=\"http://localhost:3080\",\n    username=\"admin\",\n    password=\"admin\"\n)\n\n# Option 2: Login after initialization\nclient = GNS3Client(host=\"http://localhost:3080\")\ntry:\n    client.login(username=\"admin\", password=\"admin\")\n    print(\"Successfully authenticated\")\nexcept ValueError:\n    print(\"Authentication failed\")\n</code></pre>"},{"location":"usage/python-api/#project-management","title":"Project Management","text":""},{"location":"usage/python-api/#project-properties","title":"Project Properties","text":"<p>Projects have several properties you can access:</p> <pre><code>project = client.get_project(\"My Project\")\nprint(f\"Project name: {project.name}\")\nprint(f\"Project ID: {project.id}\")\nprint(f\"Project status: {project.status}\")\nprint(f\"Project path: {project.path}\")\n</code></pre>"},{"location":"usage/python-api/#importexport-projects","title":"Import/Export Projects","text":"<p>Import a project from a file:</p> <pre><code>with open(\"network_project.gns3project\", \"rb\") as f:\n    project_data = f.read()\n\nnew_project = client.import_project(project_data, name=\"Imported Project\")\n</code></pre>"},{"location":"usage/python-api/#working-with-nodes","title":"Working with Nodes","text":""},{"location":"usage/python-api/#advanced-node-creation","title":"Advanced Node Creation","text":"<p>Create different types of nodes with specific configurations:</p> <pre><code># Create a Cisco IOSv router\nrouter = project.create_node(\n    name=\"R1\",\n    node_type=\"qemu\",\n    compute_id=\"local\",\n    properties={\n        \"template_id\": \"iosv-template-id\"\n    }\n)\n\n# Create a Linux container\ncontainer = project.create_node(\n    name=\"Ubuntu\",\n    node_type=\"docker\",\n    compute_id=\"local\",\n    properties={\n        \"image\": \"ubuntu:latest\"\n    }\n)\n</code></pre>"},{"location":"usage/python-api/#working-with-node-files","title":"Working with Node Files","text":"<p>Access and modify files on nodes:</p> <pre><code># Get file contents from a node\nconfig = node.get_file(\"/etc/network/interfaces\")\nprint(config)\n\n# Write to a file on a node\nnew_config = \"auto eth0\\niface eth0 inet dhcp\\n\"\nnode.post_file(\"/etc/network/interfaces\", new_config)\n</code></pre>"},{"location":"usage/python-api/#node-duplication","title":"Node Duplication","text":"<p>Create a copy of an existing node:</p> <pre><code># Duplicate a node\nnode_copy = node.duplicate()\nprint(f\"Created duplicate node: {node_copy.name}\")\n</code></pre>"},{"location":"usage/python-api/#working-with-links","title":"Working with Links","text":""},{"location":"usage/python-api/#advanced-link-operations","title":"Advanced Link Operations","text":"<p>Create links with specific settings:</p> <pre><code># Create a link with filters\nlink = project.create_link([\n    {\n        \"node_id\": router1.id,\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    },\n    {\n        \"node_id\": router2.id,\n        \"adapter_number\": 0,\n        \"port_number\": 0,\n        \"label\": {\n            \"text\": \"WAN Link\",\n            \"style\": \"font-size: 12px; font-weight: bold;\"\n        }\n    }\n])\n\n# Reset a link (simulate disconnect/reconnect)\nlink.reset()\n</code></pre>"},{"location":"usage/python-api/#packet-capture-analysis","title":"Packet Capture Analysis","text":"<pre><code>import subprocess\nimport tempfile\n\n# Start capture on a link\nlink.start_capture()\n\n# ... allow some traffic to flow ...\n\n# Get capture and analyze with tshark (if installed)\ncapture_data = link.get_capture_stream()\nwith tempfile.NamedTemporaryFile(delete=False, suffix='.pcap') as f:\n    f.write(capture_data)\n    pcap_file = f.name\n\ntry:\n    # Call tshark to analyze the capture file\n    output = subprocess.check_output(\n        [\"tshark\", \"-r\", pcap_file, \"-T\", \"fields\", \"-e\", \"ip.src\", \"-e\", \"ip.dst\"],\n        universal_newlines=True\n    )\n    print(\"Traffic summary:\")\n    print(output)\nexcept Exception as e:\n    print(f\"Failed to analyze capture: {e}\")\nfinally:\n    # Stop capture\n    link.stop_capture()\n</code></pre>"},{"location":"usage/python-api/#working-with-snapshots","title":"Working with Snapshots","text":"<p>Snapshots allow you to save and restore the state of a project:</p> <pre><code># Create a snapshot\nsnapshot = project.create_snapshot(\"Before configuration\")\nprint(f\"Created snapshot: {snapshot.name}\")\n\n# List snapshots\nsnapshots = project.list_snapshots()\nfor snapshot in snapshots:\n    print(f\"Snapshot: {snapshot.name}, Created: {snapshot.created_at}\")\n\n# Restore a snapshot\nproject.restore_snapshot(snapshot.id)\n</code></pre>"},{"location":"usage/python-api/#bulk-operations","title":"Bulk Operations","text":"<p>Perform operations on multiple nodes at once:</p> <pre><code># Start all nodes in a project\nproject.start_all()\n\n# Get all routers in a project\nrouters = [node for node in project.list_nodes() if \"router\" in node.name.lower()]\n\n# Perform an operation on all routers\nfor router in routers:\n    router.start()\n    print(f\"Started router: {router.name}\")\n</code></pre>"},{"location":"usage/python-api/#real-world-examples","title":"Real-world Examples","text":""},{"location":"usage/python-api/#create-a-basic-network-topology","title":"Create a Basic Network Topology","text":"<p>This example creates a simple topology with two routers connected by a link:</p> <pre><code># Create a new project\nproject = client.create_project(\"Router Network\")\n\n# Create two routers\nrouter1 = project.create_node(\n    name=\"Router1\",\n    node_type=\"dynamips\",\n    properties={\n        \"platform\": \"c7200\",\n        \"image\": \"c7200-adventerprisek9-mz.152-4.S6.image\"\n    }\n)\n\nrouter2 = project.create_node(\n    name=\"Router2\",\n    node_type=\"dynamips\",\n    properties={\n        \"platform\": \"c7200\",\n        \"image\": \"c7200-adventerprisek9-mz.152-4.S6.image\"\n    }\n)\n\n# Connect the routers\nlink = project.create_link([\n    {\n        \"node_id\": router1.id,\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    },\n    {\n        \"node_id\": router2.id,\n        \"adapter_number\": 0,\n        \"port_number\": 0\n    }\n])\n\n# Start the routers\nrouter1.start()\nrouter2.start()\n\nprint(f\"Router1 console port: {router1.console}\")\nprint(f\"Router2 console port: {router2.console}\")\n</code></pre>"},{"location":"usage/python-api/#network-automation-script","title":"Network Automation Script","text":"<p>This example shows how to automatically configure IP addresses on connected devices:</p> <pre><code># Configure IP addresses on the routers\nrouter1_config = \"\"\"\ninterface FastEthernet0/0\n ip address 192.168.1.1 255.255.255.0\n no shutdown\nexit\n\"\"\"\n\nrouter2_config = \"\"\"\ninterface FastEthernet0/0\n ip address 192.168.1.2 255.255.255.0\n no shutdown\nexit\n\"\"\"\n\n# Assuming the routers are already created and started\nrouter1.post_file(\"/startup-config\", router1_config)\nrouter2.post_file(\"/startup-config\", router2_config)\n\n# Reload the routers to apply the configuration\nrouter1.reload()\nrouter2.reload()\n</code></pre>"}]}