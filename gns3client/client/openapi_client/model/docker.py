# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Docker(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "image",
            "adapters",
        }
        
        class properties:
            adapters = schemas.AnyTypeSchema
            image = schemas.AnyTypeSchema
            start_command = schemas.AnyTypeSchema
            environment = schemas.AnyTypeSchema
            console_type = schemas.AnyTypeSchema
            console_http_port = schemas.AnyTypeSchema
            console_http_path = schemas.AnyTypeSchema
            extra_hosts = schemas.AnyTypeSchema
            extra_volumes = schemas.AnyTypeSchema
            __annotations__ = {
                "adapters": adapters,
                "image": image,
                "start_command": start_command,
                "environment": environment,
                "console_type": console_type,
                "console_http_port": console_http_port,
                "console_http_path": console_http_path,
                "extra_hosts": extra_hosts,
                "extra_volumes": extra_volumes,
            }

    
    image: MetaOapg.properties.image
    adapters: MetaOapg.properties.adapters
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapters"]) -> MetaOapg.properties.adapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_command"]) -> MetaOapg.properties.start_command: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_type"]) -> MetaOapg.properties.console_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_http_port"]) -> MetaOapg.properties.console_http_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_http_path"]) -> MetaOapg.properties.console_http_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_hosts"]) -> MetaOapg.properties.extra_hosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_volumes"]) -> MetaOapg.properties.extra_volumes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adapters", "image", "start_command", "environment", "console_type", "console_http_port", "console_http_path", "extra_hosts", "extra_volumes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapters"]) -> MetaOapg.properties.adapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_command"]) -> typing.Union[MetaOapg.properties.start_command, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union[MetaOapg.properties.environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_type"]) -> typing.Union[MetaOapg.properties.console_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_http_port"]) -> typing.Union[MetaOapg.properties.console_http_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_http_path"]) -> typing.Union[MetaOapg.properties.console_http_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_hosts"]) -> typing.Union[MetaOapg.properties.extra_hosts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_volumes"]) -> typing.Union[MetaOapg.properties.extra_volumes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adapters", "image", "start_command", "environment", "console_type", "console_http_port", "console_http_path", "extra_hosts", "extra_volumes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        image: typing.Union[MetaOapg.properties.image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        adapters: typing.Union[MetaOapg.properties.adapters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        start_command: typing.Union[MetaOapg.properties.start_command, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        environment: typing.Union[MetaOapg.properties.environment, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console_type: typing.Union[MetaOapg.properties.console_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console_http_port: typing.Union[MetaOapg.properties.console_http_port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console_http_path: typing.Union[MetaOapg.properties.console_http_path, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        extra_hosts: typing.Union[MetaOapg.properties.extra_hosts, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        extra_volumes: typing.Union[MetaOapg.properties.extra_volumes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Docker':
        return super().__new__(
            cls,
            *_args,
            image=image,
            adapters=adapters,
            start_command=start_command,
            environment=environment,
            console_type=console_type,
            console_http_port=console_http_port,
            console_http_path=console_http_path,
            extra_hosts=extra_hosts,
            extra_volumes=extra_volumes,
            _configuration=_configuration,
            **kwargs,
        )
