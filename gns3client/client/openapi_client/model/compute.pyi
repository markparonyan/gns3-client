# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Compute(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data returned for a compute.
    """


    class MetaOapg:
        required = {
            "protocol",
            "port",
            "compute_id",
            "host",
            "name",
        }
        
        class properties:
        
            @staticmethod
            def protocol() -> typing.Type['Protocol']:
                return Protocol
            host = schemas.AnyTypeSchema
            
            
            class port(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'port':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.AnyTypeSchema
            compute_id = schemas.AnyTypeSchema
            user = schemas.AnyTypeSchema
            password = schemas.AnyTypeSchema
            created_at = schemas.AnyTypeSchema
            updated_at = schemas.AnyTypeSchema
            connected = schemas.AnyTypeSchema
            cpu_usage_percent = schemas.AnyTypeSchema
            memory_usage_percent = schemas.AnyTypeSchema
            disk_usage_percent = schemas.AnyTypeSchema
            last_error = schemas.AnyTypeSchema
            capabilities = schemas.AnyTypeSchema
            __annotations__ = {
                "protocol": protocol,
                "host": host,
                "port": port,
                "name": name,
                "compute_id": compute_id,
                "user": user,
                "password": password,
                "created_at": created_at,
                "updated_at": updated_at,
                "connected": connected,
                "cpu_usage_percent": cpu_usage_percent,
                "memory_usage_percent": memory_usage_percent,
                "disk_usage_percent": disk_usage_percent,
                "last_error": last_error,
                "capabilities": capabilities,
            }

    
    protocol: 'Protocol'
    port: MetaOapg.properties.port
    compute_id: MetaOapg.properties.compute_id
    host: MetaOapg.properties.host
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> 'Protocol': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compute_id"]) -> MetaOapg.properties.compute_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_usage_percent"]) -> MetaOapg.properties.cpu_usage_percent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory_usage_percent"]) -> MetaOapg.properties.memory_usage_percent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_usage_percent"]) -> MetaOapg.properties.disk_usage_percent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_error"]) -> MetaOapg.properties.last_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capabilities"]) -> MetaOapg.properties.capabilities: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["protocol", "host", "port", "name", "compute_id", "user", "password", "created_at", "updated_at", "connected", "cpu_usage_percent", "memory_usage_percent", "disk_usage_percent", "last_error", "capabilities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> 'Protocol': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compute_id"]) -> MetaOapg.properties.compute_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_usage_percent"]) -> typing.Union[MetaOapg.properties.cpu_usage_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory_usage_percent"]) -> typing.Union[MetaOapg.properties.memory_usage_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_usage_percent"]) -> typing.Union[MetaOapg.properties.disk_usage_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_error"]) -> typing.Union[MetaOapg.properties.last_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capabilities"]) -> typing.Union[MetaOapg.properties.capabilities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["protocol", "host", "port", "name", "compute_id", "user", "password", "created_at", "updated_at", "connected", "cpu_usage_percent", "memory_usage_percent", "disk_usage_percent", "last_error", "capabilities", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        protocol: 'Protocol',
        port: typing.Union[MetaOapg.properties.port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        compute_id: typing.Union[MetaOapg.properties.compute_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        host: typing.Union[MetaOapg.properties.host, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cpu_usage_percent: typing.Union[MetaOapg.properties.cpu_usage_percent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        memory_usage_percent: typing.Union[MetaOapg.properties.memory_usage_percent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        disk_usage_percent: typing.Union[MetaOapg.properties.disk_usage_percent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        last_error: typing.Union[MetaOapg.properties.last_error, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        capabilities: typing.Union[MetaOapg.properties.capabilities, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Compute':
        return super().__new__(
            cls,
            *_args,
            protocol=protocol,
            port=port,
            compute_id=compute_id,
            host=host,
            name=name,
            user=user,
            password=password,
            created_at=created_at,
            updated_at=updated_at,
            connected=connected,
            cpu_usage_percent=cpu_usage_percent,
            memory_usage_percent=memory_usage_percent,
            disk_usage_percent=disk_usage_percent,
            last_error=last_error,
            capabilities=capabilities,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.protocol import Protocol
