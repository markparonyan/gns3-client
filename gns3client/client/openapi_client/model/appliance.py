# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Appliance(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "appliance_id",
            "name",
            "description",
            "registry_version",
            "vendor_name",
            "category",
            "product_name",
            "maintainer",
            "status",
        }
        
        class properties:
            
            
            class appliance_id(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'appliance_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.AnyTypeSchema
        
            @staticmethod
            def category() -> typing.Type['Gns3serverSchemasControllerAppliancesCategory']:
                return Gns3serverSchemasControllerAppliancesCategory
            description = schemas.AnyTypeSchema
            vendor_name = schemas.AnyTypeSchema
            product_name = schemas.AnyTypeSchema
        
            @staticmethod
            def registry_version() -> typing.Type['RegistryVersion']:
                return RegistryVersion
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            maintainer = schemas.AnyTypeSchema
            builtin = schemas.AnyTypeSchema
            vendor_url = schemas.AnyTypeSchema
            documentation_url = schemas.AnyTypeSchema
            product_url = schemas.AnyTypeSchema
            availability = schemas.AnyTypeSchema
            maintainer_email = schemas.AnyTypeSchema
            usage = schemas.AnyTypeSchema
            symbol = schemas.AnyTypeSchema
            first_port_name = schemas.AnyTypeSchema
            port_name_format = schemas.AnyTypeSchema
            port_segment_size = schemas.AnyTypeSchema
            linked_clone = schemas.AnyTypeSchema
            docker = schemas.AnyTypeSchema
            iou = schemas.AnyTypeSchema
            dynamips = schemas.AnyTypeSchema
            qemu = schemas.AnyTypeSchema
            images = schemas.AnyTypeSchema
            versions = schemas.AnyTypeSchema
            __annotations__ = {
                "appliance_id": appliance_id,
                "name": name,
                "category": category,
                "description": description,
                "vendor_name": vendor_name,
                "product_name": product_name,
                "registry_version": registry_version,
                "status": status,
                "maintainer": maintainer,
                "builtin": builtin,
                "vendor_url": vendor_url,
                "documentation_url": documentation_url,
                "product_url": product_url,
                "availability": availability,
                "maintainer_email": maintainer_email,
                "usage": usage,
                "symbol": symbol,
                "first_port_name": first_port_name,
                "port_name_format": port_name_format,
                "port_segment_size": port_segment_size,
                "linked_clone": linked_clone,
                "docker": docker,
                "iou": iou,
                "dynamips": dynamips,
                "qemu": qemu,
                "images": images,
                "versions": versions,
            }

    
    appliance_id: MetaOapg.properties.appliance_id
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    registry_version: 'RegistryVersion'
    vendor_name: MetaOapg.properties.vendor_name
    category: 'Gns3serverSchemasControllerAppliancesCategory'
    product_name: MetaOapg.properties.product_name
    maintainer: MetaOapg.properties.maintainer
    status: 'Status'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliance_id"]) -> MetaOapg.properties.appliance_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'Gns3serverSchemasControllerAppliancesCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_name"]) -> MetaOapg.properties.product_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registry_version"]) -> 'RegistryVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintainer"]) -> MetaOapg.properties.maintainer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["builtin"]) -> MetaOapg.properties.builtin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_url"]) -> MetaOapg.properties.vendor_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentation_url"]) -> MetaOapg.properties.documentation_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_url"]) -> MetaOapg.properties.product_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> MetaOapg.properties.availability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintainer_email"]) -> MetaOapg.properties.maintainer_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_port_name"]) -> MetaOapg.properties.first_port_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_name_format"]) -> MetaOapg.properties.port_name_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_segment_size"]) -> MetaOapg.properties.port_segment_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_clone"]) -> MetaOapg.properties.linked_clone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docker"]) -> MetaOapg.properties.docker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iou"]) -> MetaOapg.properties.iou: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamips"]) -> MetaOapg.properties.dynamips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qemu"]) -> MetaOapg.properties.qemu: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> MetaOapg.properties.versions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["appliance_id", "name", "category", "description", "vendor_name", "product_name", "registry_version", "status", "maintainer", "builtin", "vendor_url", "documentation_url", "product_url", "availability", "maintainer_email", "usage", "symbol", "first_port_name", "port_name_format", "port_segment_size", "linked_clone", "docker", "iou", "dynamips", "qemu", "images", "versions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliance_id"]) -> MetaOapg.properties.appliance_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> 'Gns3serverSchemasControllerAppliancesCategory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_name"]) -> MetaOapg.properties.product_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registry_version"]) -> 'RegistryVersion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintainer"]) -> MetaOapg.properties.maintainer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["builtin"]) -> typing.Union[MetaOapg.properties.builtin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_url"]) -> typing.Union[MetaOapg.properties.vendor_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentation_url"]) -> typing.Union[MetaOapg.properties.documentation_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_url"]) -> typing.Union[MetaOapg.properties.product_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> typing.Union[MetaOapg.properties.availability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintainer_email"]) -> typing.Union[MetaOapg.properties.maintainer_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union[MetaOapg.properties.usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_port_name"]) -> typing.Union[MetaOapg.properties.first_port_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_name_format"]) -> typing.Union[MetaOapg.properties.port_name_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_segment_size"]) -> typing.Union[MetaOapg.properties.port_segment_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_clone"]) -> typing.Union[MetaOapg.properties.linked_clone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docker"]) -> typing.Union[MetaOapg.properties.docker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iou"]) -> typing.Union[MetaOapg.properties.iou, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamips"]) -> typing.Union[MetaOapg.properties.dynamips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qemu"]) -> typing.Union[MetaOapg.properties.qemu, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> typing.Union[MetaOapg.properties.versions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["appliance_id", "name", "category", "description", "vendor_name", "product_name", "registry_version", "status", "maintainer", "builtin", "vendor_url", "documentation_url", "product_url", "availability", "maintainer_email", "usage", "symbol", "first_port_name", "port_name_format", "port_segment_size", "linked_clone", "docker", "iou", "dynamips", "qemu", "images", "versions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        appliance_id: typing.Union[MetaOapg.properties.appliance_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        registry_version: 'RegistryVersion',
        vendor_name: typing.Union[MetaOapg.properties.vendor_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        category: 'Gns3serverSchemasControllerAppliancesCategory',
        product_name: typing.Union[MetaOapg.properties.product_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        maintainer: typing.Union[MetaOapg.properties.maintainer, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        status: 'Status',
        builtin: typing.Union[MetaOapg.properties.builtin, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        vendor_url: typing.Union[MetaOapg.properties.vendor_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        documentation_url: typing.Union[MetaOapg.properties.documentation_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        product_url: typing.Union[MetaOapg.properties.product_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        availability: typing.Union[MetaOapg.properties.availability, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        maintainer_email: typing.Union[MetaOapg.properties.maintainer_email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        usage: typing.Union[MetaOapg.properties.usage, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        first_port_name: typing.Union[MetaOapg.properties.first_port_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        port_name_format: typing.Union[MetaOapg.properties.port_name_format, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        port_segment_size: typing.Union[MetaOapg.properties.port_segment_size, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        linked_clone: typing.Union[MetaOapg.properties.linked_clone, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        docker: typing.Union[MetaOapg.properties.docker, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        iou: typing.Union[MetaOapg.properties.iou, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        dynamips: typing.Union[MetaOapg.properties.dynamips, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        qemu: typing.Union[MetaOapg.properties.qemu, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        versions: typing.Union[MetaOapg.properties.versions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Appliance':
        return super().__new__(
            cls,
            *_args,
            appliance_id=appliance_id,
            name=name,
            description=description,
            registry_version=registry_version,
            vendor_name=vendor_name,
            category=category,
            product_name=product_name,
            maintainer=maintainer,
            status=status,
            builtin=builtin,
            vendor_url=vendor_url,
            documentation_url=documentation_url,
            product_url=product_url,
            availability=availability,
            maintainer_email=maintainer_email,
            usage=usage,
            symbol=symbol,
            first_port_name=first_port_name,
            port_name_format=port_name_format,
            port_segment_size=port_segment_size,
            linked_clone=linked_clone,
            docker=docker,
            iou=iou,
            dynamips=dynamips,
            qemu=qemu,
            images=images,
            versions=versions,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.gns3server_schemas_controller_appliances_category import Gns3serverSchemasControllerAppliancesCategory
from openapi_client.model.registry_version import RegistryVersion
from openapi_client.model.status import Status
