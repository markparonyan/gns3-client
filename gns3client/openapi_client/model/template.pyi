# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Template(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbol",
            "builtin",
            "name",
            "template_id",
            "template_type",
            "category",
        }
        
        class properties:
            
            
            class template_id(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'template_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.AnyTypeSchema
        
            @staticmethod
            def category() -> typing.Type['Gns3serverSchemasControllerTemplatesCategory']:
                return Gns3serverSchemasControllerTemplatesCategory
            symbol = schemas.AnyTypeSchema
        
            @staticmethod
            def template_type() -> typing.Type['NodeType']:
                return NodeType
            builtin = schemas.AnyTypeSchema
            version = schemas.AnyTypeSchema
            default_name_format = schemas.AnyTypeSchema
            compute_id = schemas.AnyTypeSchema
            usage = schemas.AnyTypeSchema
            created_at = schemas.AnyTypeSchema
            updated_at = schemas.AnyTypeSchema
            __annotations__ = {
                "template_id": template_id,
                "name": name,
                "category": category,
                "symbol": symbol,
                "template_type": template_type,
                "builtin": builtin,
                "version": version,
                "default_name_format": default_name_format,
                "compute_id": compute_id,
                "usage": usage,
                "created_at": created_at,
                "updated_at": updated_at,
            }
        additional_properties = schemas.AnyTypeSchema

    
    symbol: MetaOapg.properties.symbol
    builtin: MetaOapg.properties.builtin
    name: MetaOapg.properties.name
    template_id: MetaOapg.properties.template_id
    template_type: 'NodeType'
    category: 'Gns3serverSchemasControllerTemplatesCategory'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["builtin"]) -> MetaOapg.properties.builtin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_type"]) -> 'NodeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'Gns3serverSchemasControllerTemplatesCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_name_format"]) -> MetaOapg.properties.default_name_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compute_id"]) -> MetaOapg.properties.compute_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol"], typing_extensions.Literal["builtin"], typing_extensions.Literal["name"], typing_extensions.Literal["template_id"], typing_extensions.Literal["template_type"], typing_extensions.Literal["category"], typing_extensions.Literal["version"], typing_extensions.Literal["default_name_format"], typing_extensions.Literal["compute_id"], typing_extensions.Literal["usage"], typing_extensions.Literal["created_at"], typing_extensions.Literal["updated_at"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["builtin"]) -> MetaOapg.properties.builtin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_type"]) -> 'NodeType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> 'Gns3serverSchemasControllerTemplatesCategory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_name_format"]) -> typing.Union[MetaOapg.properties.default_name_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compute_id"]) -> typing.Union[MetaOapg.properties.compute_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union[MetaOapg.properties.usage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol"], typing_extensions.Literal["builtin"], typing_extensions.Literal["name"], typing_extensions.Literal["template_id"], typing_extensions.Literal["template_type"], typing_extensions.Literal["category"], typing_extensions.Literal["version"], typing_extensions.Literal["default_name_format"], typing_extensions.Literal["compute_id"], typing_extensions.Literal["usage"], typing_extensions.Literal["created_at"], typing_extensions.Literal["updated_at"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        symbol: typing.Union[MetaOapg.properties.symbol, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        builtin: typing.Union[MetaOapg.properties.builtin, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        template_id: typing.Union[MetaOapg.properties.template_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        template_type: 'NodeType',
        category: 'Gns3serverSchemasControllerTemplatesCategory',
        version: typing.Union[MetaOapg.properties.version, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        default_name_format: typing.Union[MetaOapg.properties.default_name_format, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        compute_id: typing.Union[MetaOapg.properties.compute_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        usage: typing.Union[MetaOapg.properties.usage, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'Template':
        return super().__new__(
            cls,
            *_args,
            symbol=symbol,
            builtin=builtin,
            name=name,
            template_id=template_id,
            template_type=template_type,
            category=category,
            version=version,
            default_name_format=default_name_format,
            compute_id=compute_id,
            usage=usage,
            created_at=created_at,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.gns3server_schemas_controller_templates_category import Gns3serverSchemasControllerTemplatesCategory
from openapi_client.model.node_type import NodeType
