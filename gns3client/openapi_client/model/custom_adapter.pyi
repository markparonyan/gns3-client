# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CustomAdapter(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Custom adapter data.
    """


    class MetaOapg:
        required = {
            "adapter_number",
        }
        
        class properties:
            adapter_number = schemas.AnyTypeSchema
            port_name = schemas.AnyTypeSchema
            adapter_type = schemas.AnyTypeSchema
            mac_address = schemas.AnyTypeSchema
            __annotations__ = {
                "adapter_number": adapter_number,
                "port_name": port_name,
                "adapter_type": adapter_type,
                "mac_address": mac_address,
            }

    
    adapter_number: MetaOapg.properties.adapter_number
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_number"]) -> MetaOapg.properties.adapter_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_name"]) -> MetaOapg.properties.port_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_type"]) -> MetaOapg.properties.adapter_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adapter_number", "port_name", "adapter_type", "mac_address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_number"]) -> MetaOapg.properties.adapter_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_name"]) -> typing.Union[MetaOapg.properties.port_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_type"]) -> typing.Union[MetaOapg.properties.adapter_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adapter_number", "port_name", "adapter_type", "mac_address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        adapter_number: typing.Union[MetaOapg.properties.adapter_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        port_name: typing.Union[MetaOapg.properties.port_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        adapter_type: typing.Union[MetaOapg.properties.adapter_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomAdapter':
        return super().__new__(
            cls,
            *_args,
            adapter_number=adapter_number,
            port_name=port_name,
            adapter_type=adapter_type,
            mac_address=mac_address,
            _configuration=_configuration,
            **kwargs,
        )
