# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Qemu(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "adapters",
            "kvm",
            "console_type",
            "adapter_type",
            "arch",
            "ram",
        }
        
        class properties:
        
            @staticmethod
            def adapter_type() -> typing.Type['AdapterType']:
                return AdapterType
            adapters = schemas.AnyTypeSchema
            ram = schemas.AnyTypeSchema
        
            @staticmethod
            def arch() -> typing.Type['Arch']:
                return Arch
        
            @staticmethod
            def console_type() -> typing.Type['ConsoleType1']:
                return ConsoleType1
        
            @staticmethod
            def kvm() -> typing.Type['Kvm']:
                return Kvm
            cpus = schemas.AnyTypeSchema
            hda_disk_interface = schemas.AnyTypeSchema
            hdb_disk_interface = schemas.AnyTypeSchema
            hdc_disk_interface = schemas.AnyTypeSchema
            hdd_disk_interface = schemas.AnyTypeSchema
            boot_priority = schemas.AnyTypeSchema
            kernel_command_line = schemas.AnyTypeSchema
            options = schemas.AnyTypeSchema
            cpu_throttling = schemas.AnyTypeSchema
            process_priority = schemas.AnyTypeSchema
            __annotations__ = {
                "adapter_type": adapter_type,
                "adapters": adapters,
                "ram": ram,
                "arch": arch,
                "console_type": console_type,
                "kvm": kvm,
                "cpus": cpus,
                "hda_disk_interface": hda_disk_interface,
                "hdb_disk_interface": hdb_disk_interface,
                "hdc_disk_interface": hdc_disk_interface,
                "hdd_disk_interface": hdd_disk_interface,
                "boot_priority": boot_priority,
                "kernel_command_line": kernel_command_line,
                "options": options,
                "cpu_throttling": cpu_throttling,
                "process_priority": process_priority,
            }

    
    adapters: MetaOapg.properties.adapters
    kvm: 'Kvm'
    console_type: 'ConsoleType1'
    adapter_type: 'AdapterType'
    arch: 'Arch'
    ram: MetaOapg.properties.ram
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_type"]) -> 'AdapterType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapters"]) -> MetaOapg.properties.adapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arch"]) -> 'Arch': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_type"]) -> 'ConsoleType1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kvm"]) -> 'Kvm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus"]) -> MetaOapg.properties.cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hda_disk_interface"]) -> MetaOapg.properties.hda_disk_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdb_disk_interface"]) -> MetaOapg.properties.hdb_disk_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdc_disk_interface"]) -> MetaOapg.properties.hdc_disk_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdd_disk_interface"]) -> MetaOapg.properties.hdd_disk_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boot_priority"]) -> MetaOapg.properties.boot_priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kernel_command_line"]) -> MetaOapg.properties.kernel_command_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_throttling"]) -> MetaOapg.properties.cpu_throttling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["process_priority"]) -> MetaOapg.properties.process_priority: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["adapter_type", "adapters", "ram", "arch", "console_type", "kvm", "cpus", "hda_disk_interface", "hdb_disk_interface", "hdc_disk_interface", "hdd_disk_interface", "boot_priority", "kernel_command_line", "options", "cpu_throttling", "process_priority", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_type"]) -> 'AdapterType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapters"]) -> MetaOapg.properties.adapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arch"]) -> 'Arch': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_type"]) -> 'ConsoleType1': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kvm"]) -> 'Kvm': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus"]) -> typing.Union[MetaOapg.properties.cpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hda_disk_interface"]) -> typing.Union[MetaOapg.properties.hda_disk_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdb_disk_interface"]) -> typing.Union[MetaOapg.properties.hdb_disk_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdc_disk_interface"]) -> typing.Union[MetaOapg.properties.hdc_disk_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdd_disk_interface"]) -> typing.Union[MetaOapg.properties.hdd_disk_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boot_priority"]) -> typing.Union[MetaOapg.properties.boot_priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kernel_command_line"]) -> typing.Union[MetaOapg.properties.kernel_command_line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union[MetaOapg.properties.options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_throttling"]) -> typing.Union[MetaOapg.properties.cpu_throttling, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["process_priority"]) -> typing.Union[MetaOapg.properties.process_priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["adapter_type", "adapters", "ram", "arch", "console_type", "kvm", "cpus", "hda_disk_interface", "hdb_disk_interface", "hdc_disk_interface", "hdd_disk_interface", "boot_priority", "kernel_command_line", "options", "cpu_throttling", "process_priority", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        adapters: typing.Union[MetaOapg.properties.adapters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kvm: 'Kvm',
        console_type: 'ConsoleType1',
        adapter_type: 'AdapterType',
        arch: 'Arch',
        ram: typing.Union[MetaOapg.properties.ram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        cpus: typing.Union[MetaOapg.properties.cpus, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hda_disk_interface: typing.Union[MetaOapg.properties.hda_disk_interface, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdb_disk_interface: typing.Union[MetaOapg.properties.hdb_disk_interface, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdc_disk_interface: typing.Union[MetaOapg.properties.hdc_disk_interface, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdd_disk_interface: typing.Union[MetaOapg.properties.hdd_disk_interface, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        boot_priority: typing.Union[MetaOapg.properties.boot_priority, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        kernel_command_line: typing.Union[MetaOapg.properties.kernel_command_line, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cpu_throttling: typing.Union[MetaOapg.properties.cpu_throttling, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        process_priority: typing.Union[MetaOapg.properties.process_priority, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Qemu':
        return super().__new__(
            cls,
            *_args,
            adapters=adapters,
            kvm=kvm,
            console_type=console_type,
            adapter_type=adapter_type,
            arch=arch,
            ram=ram,
            cpus=cpus,
            hda_disk_interface=hda_disk_interface,
            hdb_disk_interface=hdb_disk_interface,
            hdc_disk_interface=hdc_disk_interface,
            hdd_disk_interface=hdd_disk_interface,
            boot_priority=boot_priority,
            kernel_command_line=kernel_command_line,
            options=options,
            cpu_throttling=cpu_throttling,
            process_priority=process_priority,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.adapter_type import AdapterType
from openapi_client.model.arch import Arch
from openapi_client.model.console_type1 import ConsoleType1
from openapi_client.model.kvm import Kvm
