# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gns3client.openapi_client import schemas  # noqa: F401


class Capabilities(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Capabilities supported by a compute.
    """


    class MetaOapg:
        required = {
            "node_types",
            "memory",
            "cpus",
            "disk_size",
            "version",
            "platform",
        }
        
        class properties:
            version = schemas.AnyTypeSchema
            node_types = schemas.AnyTypeSchema
            platform = schemas.AnyTypeSchema
            cpus = schemas.AnyTypeSchema
            memory = schemas.AnyTypeSchema
            disk_size = schemas.AnyTypeSchema
            __annotations__ = {
                "version": version,
                "node_types": node_types,
                "platform": platform,
                "cpus": cpus,
                "memory": memory,
                "disk_size": disk_size,
            }

    
    node_types: MetaOapg.properties.node_types
    memory: MetaOapg.properties.memory
    cpus: MetaOapg.properties.cpus
    disk_size: MetaOapg.properties.disk_size
    version: MetaOapg.properties.version
    platform: MetaOapg.properties.platform
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_types"]) -> MetaOapg.properties.node_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpus"]) -> MetaOapg.properties.cpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_size"]) -> MetaOapg.properties.disk_size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "node_types", "platform", "cpus", "memory", "disk_size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_types"]) -> MetaOapg.properties.node_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpus"]) -> MetaOapg.properties.cpus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_size"]) -> MetaOapg.properties.disk_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "node_types", "platform", "cpus", "memory", "disk_size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        node_types: typing.Union[MetaOapg.properties.node_types, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        memory: typing.Union[MetaOapg.properties.memory, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        cpus: typing.Union[MetaOapg.properties.cpus, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        disk_size: typing.Union[MetaOapg.properties.disk_size, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        version: typing.Union[MetaOapg.properties.version, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        platform: typing.Union[MetaOapg.properties.platform, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Capabilities':
        return super().__new__(
            cls,
            *_args,
            node_types=node_types,
            memory=memory,
            cpus=cpus,
            disk_size=disk_size,
            version=version,
            platform=platform,
            _configuration=_configuration,
            **kwargs,
        )
