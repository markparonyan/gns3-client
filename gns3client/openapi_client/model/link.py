# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gns3client.openapi_client import schemas  # noqa: F401


class Link(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "link_id",
        }
        
        class properties:
            
            
            class link_id(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'link_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            nodes = schemas.AnyTypeSchema
            suspend = schemas.AnyTypeSchema
            link_style = schemas.AnyTypeSchema
            filters = schemas.AnyTypeSchema
            project_id = schemas.AnyTypeSchema
            link_type = schemas.AnyTypeSchema
            capturing = schemas.AnyTypeSchema
            capture_file_name = schemas.AnyTypeSchema
            capture_file_path = schemas.AnyTypeSchema
            capture_compute_id = schemas.AnyTypeSchema
            __annotations__ = {
                "link_id": link_id,
                "nodes": nodes,
                "suspend": suspend,
                "link_style": link_style,
                "filters": filters,
                "project_id": project_id,
                "link_type": link_type,
                "capturing": capturing,
                "capture_file_name": capture_file_name,
                "capture_file_path": capture_file_path,
                "capture_compute_id": capture_compute_id,
            }

    
    link_id: MetaOapg.properties.link_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspend"]) -> MetaOapg.properties.suspend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_style"]) -> MetaOapg.properties.link_style: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_type"]) -> MetaOapg.properties.link_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capturing"]) -> MetaOapg.properties.capturing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capture_file_name"]) -> MetaOapg.properties.capture_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capture_file_path"]) -> MetaOapg.properties.capture_file_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capture_compute_id"]) -> MetaOapg.properties.capture_compute_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["link_id", "nodes", "suspend", "link_style", "filters", "project_id", "link_type", "capturing", "capture_file_name", "capture_file_path", "capture_compute_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_id"]) -> MetaOapg.properties.link_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspend"]) -> typing.Union[MetaOapg.properties.suspend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_style"]) -> typing.Union[MetaOapg.properties.link_style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union[MetaOapg.properties.filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_type"]) -> typing.Union[MetaOapg.properties.link_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capturing"]) -> typing.Union[MetaOapg.properties.capturing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capture_file_name"]) -> typing.Union[MetaOapg.properties.capture_file_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capture_file_path"]) -> typing.Union[MetaOapg.properties.capture_file_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capture_compute_id"]) -> typing.Union[MetaOapg.properties.capture_compute_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["link_id", "nodes", "suspend", "link_style", "filters", "project_id", "link_type", "capturing", "capture_file_name", "capture_file_path", "capture_compute_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        link_id: typing.Union[MetaOapg.properties.link_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        nodes: typing.Union[MetaOapg.properties.nodes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        suspend: typing.Union[MetaOapg.properties.suspend, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        link_style: typing.Union[MetaOapg.properties.link_style, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        filters: typing.Union[MetaOapg.properties.filters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        link_type: typing.Union[MetaOapg.properties.link_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        capturing: typing.Union[MetaOapg.properties.capturing, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        capture_file_name: typing.Union[MetaOapg.properties.capture_file_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        capture_file_path: typing.Union[MetaOapg.properties.capture_file_path, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        capture_compute_id: typing.Union[MetaOapg.properties.capture_compute_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Link':
        return super().__new__(
            cls,
            *_args,
            link_id=link_id,
            nodes=nodes,
            suspend=suspend,
            link_style=link_style,
            filters=filters,
            project_id=project_id,
            link_type=link_type,
            capturing=capturing,
            capture_file_name=capture_file_name,
            capture_file_path=capture_file_path,
            capture_compute_id=capture_compute_id,
            _configuration=_configuration,
            **kwargs,
        )
