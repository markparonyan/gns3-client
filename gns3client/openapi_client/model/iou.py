# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gns3client.openapi_client import schemas  # noqa: F401


class Iou(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ethernet_adapters",
            "nvram",
            "serial_adapters",
            "startup_config",
            "ram",
        }
        
        class properties:
            ethernet_adapters = schemas.AnyTypeSchema
            serial_adapters = schemas.AnyTypeSchema
            nvram = schemas.AnyTypeSchema
            ram = schemas.AnyTypeSchema
            startup_config = schemas.AnyTypeSchema
            __annotations__ = {
                "ethernet_adapters": ethernet_adapters,
                "serial_adapters": serial_adapters,
                "nvram": nvram,
                "ram": ram,
                "startup_config": startup_config,
            }

    
    ethernet_adapters: MetaOapg.properties.ethernet_adapters
    nvram: MetaOapg.properties.nvram
    serial_adapters: MetaOapg.properties.serial_adapters
    startup_config: MetaOapg.properties.startup_config
    ram: MetaOapg.properties.ram
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethernet_adapters"]) -> MetaOapg.properties.ethernet_adapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_adapters"]) -> MetaOapg.properties.serial_adapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nvram"]) -> MetaOapg.properties.nvram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startup_config"]) -> MetaOapg.properties.startup_config: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ethernet_adapters", "serial_adapters", "nvram", "ram", "startup_config", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethernet_adapters"]) -> MetaOapg.properties.ethernet_adapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_adapters"]) -> MetaOapg.properties.serial_adapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nvram"]) -> MetaOapg.properties.nvram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startup_config"]) -> MetaOapg.properties.startup_config: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ethernet_adapters", "serial_adapters", "nvram", "ram", "startup_config", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ethernet_adapters: typing.Union[MetaOapg.properties.ethernet_adapters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        nvram: typing.Union[MetaOapg.properties.nvram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        serial_adapters: typing.Union[MetaOapg.properties.serial_adapters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        startup_config: typing.Union[MetaOapg.properties.startup_config, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ram: typing.Union[MetaOapg.properties.ram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Iou':
        return super().__new__(
            cls,
            *_args,
            ethernet_adapters=ethernet_adapters,
            nvram=nvram,
            serial_adapters=serial_adapters,
            startup_config=startup_config,
            ram=ram,
            _configuration=_configuration,
            **kwargs,
        )
