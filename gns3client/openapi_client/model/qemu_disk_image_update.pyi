# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class QemuDiskImageUpdate(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            format = schemas.AnyTypeSchema
            size = schemas.AnyTypeSchema
            preallocation = schemas.AnyTypeSchema
            cluster_size = schemas.AnyTypeSchema
            refcount_bits = schemas.AnyTypeSchema
            lazy_refcounts = schemas.AnyTypeSchema
            subformat = schemas.AnyTypeSchema
            static = schemas.AnyTypeSchema
            zeroed_grain = schemas.AnyTypeSchema
            adapter_type = schemas.AnyTypeSchema
            extend = schemas.AnyTypeSchema
            __annotations__ = {
                "format": format,
                "size": size,
                "preallocation": preallocation,
                "cluster_size": cluster_size,
                "refcount_bits": refcount_bits,
                "lazy_refcounts": lazy_refcounts,
                "subformat": subformat,
                "static": static,
                "zeroed_grain": zeroed_grain,
                "adapter_type": adapter_type,
                "extend": extend,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preallocation"]) -> MetaOapg.properties.preallocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster_size"]) -> MetaOapg.properties.cluster_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refcount_bits"]) -> MetaOapg.properties.refcount_bits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lazy_refcounts"]) -> MetaOapg.properties.lazy_refcounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subformat"]) -> MetaOapg.properties.subformat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["static"]) -> MetaOapg.properties.static: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zeroed_grain"]) -> MetaOapg.properties.zeroed_grain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_type"]) -> MetaOapg.properties.adapter_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extend"]) -> MetaOapg.properties.extend: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["format", "size", "preallocation", "cluster_size", "refcount_bits", "lazy_refcounts", "subformat", "static", "zeroed_grain", "adapter_type", "extend", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preallocation"]) -> typing.Union[MetaOapg.properties.preallocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster_size"]) -> typing.Union[MetaOapg.properties.cluster_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refcount_bits"]) -> typing.Union[MetaOapg.properties.refcount_bits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lazy_refcounts"]) -> typing.Union[MetaOapg.properties.lazy_refcounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subformat"]) -> typing.Union[MetaOapg.properties.subformat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["static"]) -> typing.Union[MetaOapg.properties.static, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zeroed_grain"]) -> typing.Union[MetaOapg.properties.zeroed_grain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_type"]) -> typing.Union[MetaOapg.properties.adapter_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extend"]) -> typing.Union[MetaOapg.properties.extend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["format", "size", "preallocation", "cluster_size", "refcount_bits", "lazy_refcounts", "subformat", "static", "zeroed_grain", "adapter_type", "extend", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        format: typing.Union[MetaOapg.properties.format, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        preallocation: typing.Union[MetaOapg.properties.preallocation, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cluster_size: typing.Union[MetaOapg.properties.cluster_size, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        refcount_bits: typing.Union[MetaOapg.properties.refcount_bits, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        lazy_refcounts: typing.Union[MetaOapg.properties.lazy_refcounts, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        subformat: typing.Union[MetaOapg.properties.subformat, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        static: typing.Union[MetaOapg.properties.static, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        zeroed_grain: typing.Union[MetaOapg.properties.zeroed_grain, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        adapter_type: typing.Union[MetaOapg.properties.adapter_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        extend: typing.Union[MetaOapg.properties.extend, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QemuDiskImageUpdate':
        return super().__new__(
            cls,
            *_args,
            format=format,
            size=size,
            preallocation=preallocation,
            cluster_size=cluster_size,
            refcount_bits=refcount_bits,
            lazy_refcounts=lazy_refcounts,
            subformat=subformat,
            static=static,
            zeroed_grain=zeroed_grain,
            adapter_type=adapter_type,
            extend=extend,
            _configuration=_configuration,
            **kwargs,
        )
