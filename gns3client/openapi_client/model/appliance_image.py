# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gns3client.openapi_client import schemas  # noqa: F401


class ApplianceImage(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "filename",
            "md5sum",
            "filesize",
            "version",
        }
        
        class properties:
            filename = schemas.AnyTypeSchema
            version = schemas.AnyTypeSchema
            
            
            class md5sum(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[a-f0-9]{32}$',  # noqa: E501
                    }]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'md5sum':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            filesize = schemas.AnyTypeSchema
            download_url = schemas.AnyTypeSchema
            direct_download_url = schemas.AnyTypeSchema
            compression = schemas.AnyTypeSchema
            __annotations__ = {
                "filename": filename,
                "version": version,
                "md5sum": md5sum,
                "filesize": filesize,
                "download_url": download_url,
                "direct_download_url": direct_download_url,
                "compression": compression,
            }

    
    filename: MetaOapg.properties.filename
    md5sum: MetaOapg.properties.md5sum
    filesize: MetaOapg.properties.filesize
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5sum"]) -> MetaOapg.properties.md5sum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filesize"]) -> MetaOapg.properties.filesize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direct_download_url"]) -> MetaOapg.properties.direct_download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compression"]) -> MetaOapg.properties.compression: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filename", "version", "md5sum", "filesize", "download_url", "direct_download_url", "compression", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5sum"]) -> MetaOapg.properties.md5sum: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filesize"]) -> MetaOapg.properties.filesize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direct_download_url"]) -> typing.Union[MetaOapg.properties.direct_download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compression"]) -> typing.Union[MetaOapg.properties.compression, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filename", "version", "md5sum", "filesize", "download_url", "direct_download_url", "compression", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        filename: typing.Union[MetaOapg.properties.filename, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        md5sum: typing.Union[MetaOapg.properties.md5sum, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        filesize: typing.Union[MetaOapg.properties.filesize, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        version: typing.Union[MetaOapg.properties.version, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        download_url: typing.Union[MetaOapg.properties.download_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        direct_download_url: typing.Union[MetaOapg.properties.direct_download_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        compression: typing.Union[MetaOapg.properties.compression, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplianceImage':
        return super().__new__(
            cls,
            *_args,
            filename=filename,
            md5sum=md5sum,
            filesize=filesize,
            version=version,
            download_url=download_url,
            direct_download_url=direct_download_url,
            compression=compression,
            _configuration=_configuration,
            **kwargs,
        )
