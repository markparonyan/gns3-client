# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NodePort(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Node port data.
    """


    class MetaOapg:
        required = {
            "link_type",
            "adapter_number",
            "data_link_types",
            "port_number",
            "name",
            "short_name",
        }
        
        class properties:
            name = schemas.AnyTypeSchema
            short_name = schemas.AnyTypeSchema
            adapter_number = schemas.AnyTypeSchema
            port_number = schemas.AnyTypeSchema
        
            @staticmethod
            def link_type() -> typing.Type['Gns3serverSchemasControllerNodesLinkType']:
                return Gns3serverSchemasControllerNodesLinkType
            data_link_types = schemas.AnyTypeSchema
            adapter_type = schemas.AnyTypeSchema
            mac_address = schemas.AnyTypeSchema
            __annotations__ = {
                "name": name,
                "short_name": short_name,
                "adapter_number": adapter_number,
                "port_number": port_number,
                "link_type": link_type,
                "data_link_types": data_link_types,
                "adapter_type": adapter_type,
                "mac_address": mac_address,
            }

    
    link_type: 'Gns3serverSchemasControllerNodesLinkType'
    adapter_number: MetaOapg.properties.adapter_number
    data_link_types: MetaOapg.properties.data_link_types
    port_number: MetaOapg.properties.port_number
    name: MetaOapg.properties.name
    short_name: MetaOapg.properties.short_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_name"]) -> MetaOapg.properties.short_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_number"]) -> MetaOapg.properties.adapter_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_type"]) -> 'Gns3serverSchemasControllerNodesLinkType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_link_types"]) -> MetaOapg.properties.data_link_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adapter_type"]) -> MetaOapg.properties.adapter_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "short_name", "adapter_number", "port_number", "link_type", "data_link_types", "adapter_type", "mac_address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_name"]) -> MetaOapg.properties.short_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_number"]) -> MetaOapg.properties.adapter_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_type"]) -> 'Gns3serverSchemasControllerNodesLinkType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_link_types"]) -> MetaOapg.properties.data_link_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adapter_type"]) -> typing.Union[MetaOapg.properties.adapter_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "short_name", "adapter_number", "port_number", "link_type", "data_link_types", "adapter_type", "mac_address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        link_type: 'Gns3serverSchemasControllerNodesLinkType',
        adapter_number: typing.Union[MetaOapg.properties.adapter_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        data_link_types: typing.Union[MetaOapg.properties.data_link_types, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        port_number: typing.Union[MetaOapg.properties.port_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        short_name: typing.Union[MetaOapg.properties.short_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        adapter_type: typing.Union[MetaOapg.properties.adapter_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NodePort':
        return super().__new__(
            cls,
            *_args,
            link_type=link_type,
            adapter_number=adapter_number,
            data_link_types=data_link_types,
            port_number=port_number,
            name=name,
            short_name=short_name,
            adapter_type=adapter_type,
            mac_address=mac_address,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.gns3server_schemas_controller_nodes_link_type import Gns3serverSchemasControllerNodesLinkType
