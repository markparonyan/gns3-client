# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NodeCreate(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "node_type",
            "compute_id",
            "name",
        }
        
        class properties:
            compute_id = schemas.AnyTypeSchema
            name = schemas.AnyTypeSchema
        
            @staticmethod
            def node_type() -> typing.Type['NodeType']:
                return NodeType
            
            
            class node_id(
                schemas.UUIDBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'node_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            console = schemas.AnyTypeSchema
            console_type = schemas.AnyTypeSchema
            console_auto_start = schemas.AnyTypeSchema
            aux = schemas.AnyTypeSchema
            aux_type = schemas.AnyTypeSchema
            properties = schemas.AnyTypeSchema
            label = schemas.AnyTypeSchema
            symbol = schemas.AnyTypeSchema
            x = schemas.AnyTypeSchema
            y = schemas.AnyTypeSchema
            z = schemas.AnyTypeSchema
            locked = schemas.AnyTypeSchema
            port_name_format = schemas.AnyTypeSchema
            port_segment_size = schemas.AnyTypeSchema
            first_port_name = schemas.AnyTypeSchema
            custom_adapters = schemas.AnyTypeSchema
            __annotations__ = {
                "compute_id": compute_id,
                "name": name,
                "node_type": node_type,
                "node_id": node_id,
                "console": console,
                "console_type": console_type,
                "console_auto_start": console_auto_start,
                "aux": aux,
                "aux_type": aux_type,
                "properties": properties,
                "label": label,
                "symbol": symbol,
                "x": x,
                "y": y,
                "z": z,
                "locked": locked,
                "port_name_format": port_name_format,
                "port_segment_size": port_segment_size,
                "first_port_name": first_port_name,
                "custom_adapters": custom_adapters,
            }

    
    node_type: 'NodeType'
    compute_id: MetaOapg.properties.compute_id
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compute_id"]) -> MetaOapg.properties.compute_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_type"]) -> 'NodeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["node_id"]) -> MetaOapg.properties.node_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console"]) -> MetaOapg.properties.console: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_type"]) -> MetaOapg.properties.console_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["console_auto_start"]) -> MetaOapg.properties.console_auto_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aux"]) -> MetaOapg.properties.aux: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aux_type"]) -> MetaOapg.properties.aux_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["z"]) -> MetaOapg.properties.z: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_name_format"]) -> MetaOapg.properties.port_name_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_segment_size"]) -> MetaOapg.properties.port_segment_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_port_name"]) -> MetaOapg.properties.first_port_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_adapters"]) -> MetaOapg.properties.custom_adapters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["compute_id", "name", "node_type", "node_id", "console", "console_type", "console_auto_start", "aux", "aux_type", "properties", "label", "symbol", "x", "y", "z", "locked", "port_name_format", "port_segment_size", "first_port_name", "custom_adapters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compute_id"]) -> MetaOapg.properties.compute_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_type"]) -> 'NodeType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["node_id"]) -> typing.Union[MetaOapg.properties.node_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console"]) -> typing.Union[MetaOapg.properties.console, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_type"]) -> typing.Union[MetaOapg.properties.console_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["console_auto_start"]) -> typing.Union[MetaOapg.properties.console_auto_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aux"]) -> typing.Union[MetaOapg.properties.aux, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aux_type"]) -> typing.Union[MetaOapg.properties.aux_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["z"]) -> typing.Union[MetaOapg.properties.z, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> typing.Union[MetaOapg.properties.locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_name_format"]) -> typing.Union[MetaOapg.properties.port_name_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_segment_size"]) -> typing.Union[MetaOapg.properties.port_segment_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_port_name"]) -> typing.Union[MetaOapg.properties.first_port_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_adapters"]) -> typing.Union[MetaOapg.properties.custom_adapters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["compute_id", "name", "node_type", "node_id", "console", "console_type", "console_auto_start", "aux", "aux_type", "properties", "label", "symbol", "x", "y", "z", "locked", "port_name_format", "port_segment_size", "first_port_name", "custom_adapters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        node_type: 'NodeType',
        compute_id: typing.Union[MetaOapg.properties.compute_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        node_id: typing.Union[MetaOapg.properties.node_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console: typing.Union[MetaOapg.properties.console, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console_type: typing.Union[MetaOapg.properties.console_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        console_auto_start: typing.Union[MetaOapg.properties.console_auto_start, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        aux: typing.Union[MetaOapg.properties.aux, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        aux_type: typing.Union[MetaOapg.properties.aux_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        x: typing.Union[MetaOapg.properties.x, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        y: typing.Union[MetaOapg.properties.y, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        z: typing.Union[MetaOapg.properties.z, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        locked: typing.Union[MetaOapg.properties.locked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        port_name_format: typing.Union[MetaOapg.properties.port_name_format, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        port_segment_size: typing.Union[MetaOapg.properties.port_segment_size, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        first_port_name: typing.Union[MetaOapg.properties.first_port_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        custom_adapters: typing.Union[MetaOapg.properties.custom_adapters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NodeCreate':
        return super().__new__(
            cls,
            *_args,
            node_type=node_type,
            compute_id=compute_id,
            name=name,
            node_id=node_id,
            console=console,
            console_type=console_type,
            console_auto_start=console_auto_start,
            aux=aux,
            aux_type=aux_type,
            properties=properties,
            label=label,
            symbol=symbol,
            x=x,
            y=y,
            z=z,
            locked=locked,
            port_name_format=port_name_format,
            port_segment_size=port_segment_size,
            first_port_name=first_port_name,
            custom_adapters=custom_adapters,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.node_type import NodeType
