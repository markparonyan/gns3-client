# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Dynamips(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "nvram",
            "platform",
            "ram",
        }
        
        class properties:
        
            @staticmethod
            def platform() -> typing.Type['Platform']:
                return Platform
            
            
            class ram(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ram':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class nvram(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'nvram':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            chassis = schemas.AnyTypeSchema
            startup_config = schemas.AnyTypeSchema
            wic0 = schemas.AnyTypeSchema
            wic1 = schemas.AnyTypeSchema
            wic2 = schemas.AnyTypeSchema
            slot0 = schemas.AnyTypeSchema
            slot1 = schemas.AnyTypeSchema
            slot2 = schemas.AnyTypeSchema
            slot3 = schemas.AnyTypeSchema
            slot4 = schemas.AnyTypeSchema
            slot5 = schemas.AnyTypeSchema
            slot6 = schemas.AnyTypeSchema
            midplane = schemas.AnyTypeSchema
            npe = schemas.AnyTypeSchema
            __annotations__ = {
                "platform": platform,
                "ram": ram,
                "nvram": nvram,
                "chassis": chassis,
                "startup_config": startup_config,
                "wic0": wic0,
                "wic1": wic1,
                "wic2": wic2,
                "slot0": slot0,
                "slot1": slot1,
                "slot2": slot2,
                "slot3": slot3,
                "slot4": slot4,
                "slot5": slot5,
                "slot6": slot6,
                "midplane": midplane,
                "npe": npe,
            }

    
    nvram: MetaOapg.properties.nvram
    platform: 'Platform'
    ram: MetaOapg.properties.ram
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> 'Platform': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nvram"]) -> MetaOapg.properties.nvram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chassis"]) -> MetaOapg.properties.chassis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startup_config"]) -> MetaOapg.properties.startup_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wic0"]) -> MetaOapg.properties.wic0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wic1"]) -> MetaOapg.properties.wic1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wic2"]) -> MetaOapg.properties.wic2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot0"]) -> MetaOapg.properties.slot0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot1"]) -> MetaOapg.properties.slot1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot2"]) -> MetaOapg.properties.slot2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot3"]) -> MetaOapg.properties.slot3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot4"]) -> MetaOapg.properties.slot4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot5"]) -> MetaOapg.properties.slot5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slot6"]) -> MetaOapg.properties.slot6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["midplane"]) -> MetaOapg.properties.midplane: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["npe"]) -> MetaOapg.properties.npe: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["platform", "ram", "nvram", "chassis", "startup_config", "wic0", "wic1", "wic2", "slot0", "slot1", "slot2", "slot3", "slot4", "slot5", "slot6", "midplane", "npe", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> 'Platform': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nvram"]) -> MetaOapg.properties.nvram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chassis"]) -> typing.Union[MetaOapg.properties.chassis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startup_config"]) -> typing.Union[MetaOapg.properties.startup_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wic0"]) -> typing.Union[MetaOapg.properties.wic0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wic1"]) -> typing.Union[MetaOapg.properties.wic1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wic2"]) -> typing.Union[MetaOapg.properties.wic2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot0"]) -> typing.Union[MetaOapg.properties.slot0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot1"]) -> typing.Union[MetaOapg.properties.slot1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot2"]) -> typing.Union[MetaOapg.properties.slot2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot3"]) -> typing.Union[MetaOapg.properties.slot3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot4"]) -> typing.Union[MetaOapg.properties.slot4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot5"]) -> typing.Union[MetaOapg.properties.slot5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slot6"]) -> typing.Union[MetaOapg.properties.slot6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["midplane"]) -> typing.Union[MetaOapg.properties.midplane, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["npe"]) -> typing.Union[MetaOapg.properties.npe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["platform", "ram", "nvram", "chassis", "startup_config", "wic0", "wic1", "wic2", "slot0", "slot1", "slot2", "slot3", "slot4", "slot5", "slot6", "midplane", "npe", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        nvram: typing.Union[MetaOapg.properties.nvram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        platform: 'Platform',
        ram: typing.Union[MetaOapg.properties.ram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        chassis: typing.Union[MetaOapg.properties.chassis, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        startup_config: typing.Union[MetaOapg.properties.startup_config, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        wic0: typing.Union[MetaOapg.properties.wic0, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        wic1: typing.Union[MetaOapg.properties.wic1, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        wic2: typing.Union[MetaOapg.properties.wic2, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot0: typing.Union[MetaOapg.properties.slot0, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot1: typing.Union[MetaOapg.properties.slot1, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot2: typing.Union[MetaOapg.properties.slot2, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot3: typing.Union[MetaOapg.properties.slot3, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot4: typing.Union[MetaOapg.properties.slot4, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot5: typing.Union[MetaOapg.properties.slot5, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        slot6: typing.Union[MetaOapg.properties.slot6, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        midplane: typing.Union[MetaOapg.properties.midplane, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        npe: typing.Union[MetaOapg.properties.npe, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dynamips':
        return super().__new__(
            cls,
            *_args,
            nvram=nvram,
            platform=platform,
            ram=ram,
            chassis=chassis,
            startup_config=startup_config,
            wic0=wic0,
            wic1=wic1,
            wic2=wic2,
            slot0=slot0,
            slot1=slot1,
            slot2=slot2,
            slot3=slot3,
            slot4=slot4,
            slot5=slot5,
            slot6=slot6,
            midplane=midplane,
            npe=npe,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.platform import Platform
