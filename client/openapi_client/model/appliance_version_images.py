# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ApplianceVersionImages(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            kernel_image = schemas.AnyTypeSchema
            initrd = schemas.AnyTypeSchema
            image = schemas.AnyTypeSchema
            bios_image = schemas.AnyTypeSchema
            hda_disk_image = schemas.AnyTypeSchema
            hdb_disk_image = schemas.AnyTypeSchema
            hdc_disk_image = schemas.AnyTypeSchema
            hdd_disk_image = schemas.AnyTypeSchema
            cdrom_image = schemas.AnyTypeSchema
            __annotations__ = {
                "kernel_image": kernel_image,
                "initrd": initrd,
                "image": image,
                "bios_image": bios_image,
                "hda_disk_image": hda_disk_image,
                "hdb_disk_image": hdb_disk_image,
                "hdc_disk_image": hdc_disk_image,
                "hdd_disk_image": hdd_disk_image,
                "cdrom_image": cdrom_image,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kernel_image"]) -> MetaOapg.properties.kernel_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initrd"]) -> MetaOapg.properties.initrd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bios_image"]) -> MetaOapg.properties.bios_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hda_disk_image"]) -> MetaOapg.properties.hda_disk_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdb_disk_image"]) -> MetaOapg.properties.hdb_disk_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdc_disk_image"]) -> MetaOapg.properties.hdc_disk_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hdd_disk_image"]) -> MetaOapg.properties.hdd_disk_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cdrom_image"]) -> MetaOapg.properties.cdrom_image: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kernel_image", "initrd", "image", "bios_image", "hda_disk_image", "hdb_disk_image", "hdc_disk_image", "hdd_disk_image", "cdrom_image", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kernel_image"]) -> typing.Union[MetaOapg.properties.kernel_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initrd"]) -> typing.Union[MetaOapg.properties.initrd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bios_image"]) -> typing.Union[MetaOapg.properties.bios_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hda_disk_image"]) -> typing.Union[MetaOapg.properties.hda_disk_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdb_disk_image"]) -> typing.Union[MetaOapg.properties.hdb_disk_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdc_disk_image"]) -> typing.Union[MetaOapg.properties.hdc_disk_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hdd_disk_image"]) -> typing.Union[MetaOapg.properties.hdd_disk_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cdrom_image"]) -> typing.Union[MetaOapg.properties.cdrom_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kernel_image", "initrd", "image", "bios_image", "hda_disk_image", "hdb_disk_image", "hdc_disk_image", "hdd_disk_image", "cdrom_image", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kernel_image: typing.Union[MetaOapg.properties.kernel_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        initrd: typing.Union[MetaOapg.properties.initrd, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        bios_image: typing.Union[MetaOapg.properties.bios_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hda_disk_image: typing.Union[MetaOapg.properties.hda_disk_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdb_disk_image: typing.Union[MetaOapg.properties.hdb_disk_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdc_disk_image: typing.Union[MetaOapg.properties.hdc_disk_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        hdd_disk_image: typing.Union[MetaOapg.properties.hdd_disk_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cdrom_image: typing.Union[MetaOapg.properties.cdrom_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplianceVersionImages':
        return super().__new__(
            cls,
            *_args,
            kernel_image=kernel_image,
            initrd=initrd,
            image=image,
            bios_image=bios_image,
            hda_disk_image=hda_disk_image,
            hdb_disk_image=hdb_disk_image,
            hdc_disk_image=hdc_disk_image,
            hdd_disk_image=hdd_disk_image,
            cdrom_image=cdrom_image,
            _configuration=_configuration,
            **kwargs,
        )
