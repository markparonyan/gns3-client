# coding: utf-8

"""
    GNS3 controller API

    This page describes the public controller API for GNS3  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GNS3VM(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    GNS3 VM data.
    """


    class MetaOapg:
        
        class properties:
            enable = schemas.AnyTypeSchema
            vmname = schemas.AnyTypeSchema
            when_exit = schemas.AnyTypeSchema
            headless = schemas.AnyTypeSchema
            engine = schemas.AnyTypeSchema
            allocate_vcpus_ram = schemas.AnyTypeSchema
            vcpus = schemas.AnyTypeSchema
            ram = schemas.AnyTypeSchema
            port = schemas.AnyTypeSchema
            __annotations__ = {
                "enable": enable,
                "vmname": vmname,
                "when_exit": when_exit,
                "headless": headless,
                "engine": engine,
                "allocate_vcpus_ram": allocate_vcpus_ram,
                "vcpus": vcpus,
                "ram": ram,
                "port": port,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable"]) -> MetaOapg.properties.enable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vmname"]) -> MetaOapg.properties.vmname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["when_exit"]) -> MetaOapg.properties.when_exit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headless"]) -> MetaOapg.properties.headless: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engine"]) -> MetaOapg.properties.engine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocate_vcpus_ram"]) -> MetaOapg.properties.allocate_vcpus_ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vcpus"]) -> MetaOapg.properties.vcpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enable", "vmname", "when_exit", "headless", "engine", "allocate_vcpus_ram", "vcpus", "ram", "port", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable"]) -> typing.Union[MetaOapg.properties.enable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vmname"]) -> typing.Union[MetaOapg.properties.vmname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["when_exit"]) -> typing.Union[MetaOapg.properties.when_exit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headless"]) -> typing.Union[MetaOapg.properties.headless, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engine"]) -> typing.Union[MetaOapg.properties.engine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocate_vcpus_ram"]) -> typing.Union[MetaOapg.properties.allocate_vcpus_ram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vcpus"]) -> typing.Union[MetaOapg.properties.vcpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> typing.Union[MetaOapg.properties.ram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enable", "vmname", "when_exit", "headless", "engine", "allocate_vcpus_ram", "vcpus", "ram", "port", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        enable: typing.Union[MetaOapg.properties.enable, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        vmname: typing.Union[MetaOapg.properties.vmname, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        when_exit: typing.Union[MetaOapg.properties.when_exit, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        headless: typing.Union[MetaOapg.properties.headless, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        engine: typing.Union[MetaOapg.properties.engine, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        allocate_vcpus_ram: typing.Union[MetaOapg.properties.allocate_vcpus_ram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        vcpus: typing.Union[MetaOapg.properties.vcpus, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ram: typing.Union[MetaOapg.properties.ram, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GNS3VM':
        return super().__new__(
            cls,
            *_args,
            enable=enable,
            vmname=vmname,
            when_exit=when_exit,
            headless=headless,
            engine=engine,
            allocate_vcpus_ram=allocate_vcpus_ram,
            vcpus=vcpus,
            ram=ram,
            port=port,
            _configuration=_configuration,
            **kwargs,
        )
